/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  array,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  tuple,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type BaseRuleSet =
  | { __kind: 'None' }
  | { __kind: 'ProgramAllowList'; fields: [Array<PublicKey>] }
  | { __kind: 'ProgramDenyList'; fields: [Array<PublicKey>] };

export type BaseRuleSetArgs = BaseRuleSet;

export function getBaseRuleSetSerializer(): Serializer<
  BaseRuleSetArgs,
  BaseRuleSet
> {
  return dataEnum<BaseRuleSet>(
    [
      ['None', unit()],
      [
        'ProgramAllowList',
        struct<GetDataEnumKindContent<BaseRuleSet, 'ProgramAllowList'>>([
          ['fields', tuple([array(publicKeySerializer())])],
        ]),
      ],
      [
        'ProgramDenyList',
        struct<GetDataEnumKindContent<BaseRuleSet, 'ProgramDenyList'>>([
          ['fields', tuple([array(publicKeySerializer())])],
        ]),
      ],
    ],
    { description: 'BaseRuleSet' }
  ) as Serializer<BaseRuleSetArgs, BaseRuleSet>;
}

// Data Enum Helpers.
export function baseRuleSet(
  kind: 'None'
): GetDataEnumKind<BaseRuleSetArgs, 'None'>;
export function baseRuleSet(
  kind: 'ProgramAllowList',
  data: GetDataEnumKindContent<BaseRuleSetArgs, 'ProgramAllowList'>['fields']
): GetDataEnumKind<BaseRuleSetArgs, 'ProgramAllowList'>;
export function baseRuleSet(
  kind: 'ProgramDenyList',
  data: GetDataEnumKindContent<BaseRuleSetArgs, 'ProgramDenyList'>['fields']
): GetDataEnumKind<BaseRuleSetArgs, 'ProgramDenyList'>;
export function baseRuleSet<K extends BaseRuleSetArgs['__kind']>(
  kind: K,
  data?: any
): Extract<BaseRuleSetArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isBaseRuleSet<K extends BaseRuleSet['__kind']>(
  kind: K,
  value: BaseRuleSet
): value is BaseRuleSet & { __kind: K } {
  return value.__kind === kind;
}
