/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  BasePluginAuthority,
  BasePluginAuthorityArgs,
  getBasePluginAuthoritySerializer,
} from '.';

export type BaseLinkedDataKey =
  | { __kind: 'LinkedLifecycleHook'; fields: [PublicKey] }
  | { __kind: 'LinkedAppData'; fields: [BasePluginAuthority] };

export type BaseLinkedDataKeyArgs =
  | { __kind: 'LinkedLifecycleHook'; fields: [PublicKey] }
  | { __kind: 'LinkedAppData'; fields: [BasePluginAuthorityArgs] };

export function getBaseLinkedDataKeySerializer(): Serializer<
  BaseLinkedDataKeyArgs,
  BaseLinkedDataKey
> {
  return dataEnum<BaseLinkedDataKey>(
    [
      [
        'LinkedLifecycleHook',
        struct<
          GetDataEnumKindContent<BaseLinkedDataKey, 'LinkedLifecycleHook'>
        >([['fields', tuple([publicKeySerializer()])]]),
      ],
      [
        'LinkedAppData',
        struct<GetDataEnumKindContent<BaseLinkedDataKey, 'LinkedAppData'>>([
          ['fields', tuple([getBasePluginAuthoritySerializer()])],
        ]),
      ],
    ],
    { description: 'BaseLinkedDataKey' }
  ) as Serializer<BaseLinkedDataKeyArgs, BaseLinkedDataKey>;
}

// Data Enum Helpers.
export function baseLinkedDataKey(
  kind: 'LinkedLifecycleHook',
  data: GetDataEnumKindContent<
    BaseLinkedDataKeyArgs,
    'LinkedLifecycleHook'
  >['fields']
): GetDataEnumKind<BaseLinkedDataKeyArgs, 'LinkedLifecycleHook'>;
export function baseLinkedDataKey(
  kind: 'LinkedAppData',
  data: GetDataEnumKindContent<BaseLinkedDataKeyArgs, 'LinkedAppData'>['fields']
): GetDataEnumKind<BaseLinkedDataKeyArgs, 'LinkedAppData'>;
export function baseLinkedDataKey<K extends BaseLinkedDataKeyArgs['__kind']>(
  kind: K,
  data?: any
): Extract<BaseLinkedDataKeyArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isBaseLinkedDataKey<K extends BaseLinkedDataKey['__kind']>(
  kind: K,
  value: BaseLinkedDataKey
): value is BaseLinkedDataKey & { __kind: K } {
  return value.__kind === kind;
}
