/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  tuple,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type BaseUpdateAuthority =
  | { __kind: 'None' }
  | { __kind: 'Address'; fields: [PublicKey] }
  | { __kind: 'Collection'; fields: [PublicKey] };

export type BaseUpdateAuthorityArgs = BaseUpdateAuthority;

export function getBaseUpdateAuthoritySerializer(): Serializer<
  BaseUpdateAuthorityArgs,
  BaseUpdateAuthority
> {
  return dataEnum<BaseUpdateAuthority>(
    [
      ['None', unit()],
      [
        'Address',
        struct<GetDataEnumKindContent<BaseUpdateAuthority, 'Address'>>([
          ['fields', tuple([publicKeySerializer()])],
        ]),
      ],
      [
        'Collection',
        struct<GetDataEnumKindContent<BaseUpdateAuthority, 'Collection'>>([
          ['fields', tuple([publicKeySerializer()])],
        ]),
      ],
    ],
    { description: 'BaseUpdateAuthority' }
  ) as Serializer<BaseUpdateAuthorityArgs, BaseUpdateAuthority>;
}

// Data Enum Helpers.
export function baseUpdateAuthority(
  kind: 'None'
): GetDataEnumKind<BaseUpdateAuthorityArgs, 'None'>;
export function baseUpdateAuthority(
  kind: 'Address',
  data: GetDataEnumKindContent<BaseUpdateAuthorityArgs, 'Address'>['fields']
): GetDataEnumKind<BaseUpdateAuthorityArgs, 'Address'>;
export function baseUpdateAuthority(
  kind: 'Collection',
  data: GetDataEnumKindContent<BaseUpdateAuthorityArgs, 'Collection'>['fields']
): GetDataEnumKind<BaseUpdateAuthorityArgs, 'Collection'>;
export function baseUpdateAuthority<
  K extends BaseUpdateAuthorityArgs['__kind'],
>(kind: K, data?: any): Extract<BaseUpdateAuthorityArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isBaseUpdateAuthority<K extends BaseUpdateAuthority['__kind']>(
  kind: K,
  value: BaseUpdateAuthority
): value is BaseUpdateAuthority & { __kind: K } {
  return value.__kind === kind;
}
