/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable, PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  array,
  bool,
  dataEnum,
  option,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { BaseSeed, BaseSeedArgs, getBaseSeedSerializer } from '.';

export type BaseExtraAccount =
  | { __kind: 'PreconfiguredProgram'; isSigner: boolean; isWritable: boolean }
  | {
      __kind: 'PreconfiguredCollection';
      isSigner: boolean;
      isWritable: boolean;
    }
  | { __kind: 'PreconfiguredOwner'; isSigner: boolean; isWritable: boolean }
  | { __kind: 'PreconfiguredRecipient'; isSigner: boolean; isWritable: boolean }
  | { __kind: 'PreconfiguredAsset'; isSigner: boolean; isWritable: boolean }
  | {
      __kind: 'CustomPda';
      seeds: Array<BaseSeed>;
      customProgramId: Option<PublicKey>;
      isSigner: boolean;
      isWritable: boolean;
    }
  | {
      __kind: 'Address';
      address: PublicKey;
      isSigner: boolean;
      isWritable: boolean;
    };

export type BaseExtraAccountArgs =
  | { __kind: 'PreconfiguredProgram'; isSigner: boolean; isWritable: boolean }
  | {
      __kind: 'PreconfiguredCollection';
      isSigner: boolean;
      isWritable: boolean;
    }
  | { __kind: 'PreconfiguredOwner'; isSigner: boolean; isWritable: boolean }
  | { __kind: 'PreconfiguredRecipient'; isSigner: boolean; isWritable: boolean }
  | { __kind: 'PreconfiguredAsset'; isSigner: boolean; isWritable: boolean }
  | {
      __kind: 'CustomPda';
      seeds: Array<BaseSeedArgs>;
      customProgramId: OptionOrNullable<PublicKey>;
      isSigner: boolean;
      isWritable: boolean;
    }
  | {
      __kind: 'Address';
      address: PublicKey;
      isSigner: boolean;
      isWritable: boolean;
    };

export function getBaseExtraAccountSerializer(): Serializer<
  BaseExtraAccountArgs,
  BaseExtraAccount
> {
  return dataEnum<BaseExtraAccount>(
    [
      [
        'PreconfiguredProgram',
        struct<
          GetDataEnumKindContent<BaseExtraAccount, 'PreconfiguredProgram'>
        >([
          ['isSigner', bool()],
          ['isWritable', bool()],
        ]),
      ],
      [
        'PreconfiguredCollection',
        struct<
          GetDataEnumKindContent<BaseExtraAccount, 'PreconfiguredCollection'>
        >([
          ['isSigner', bool()],
          ['isWritable', bool()],
        ]),
      ],
      [
        'PreconfiguredOwner',
        struct<GetDataEnumKindContent<BaseExtraAccount, 'PreconfiguredOwner'>>([
          ['isSigner', bool()],
          ['isWritable', bool()],
        ]),
      ],
      [
        'PreconfiguredRecipient',
        struct<
          GetDataEnumKindContent<BaseExtraAccount, 'PreconfiguredRecipient'>
        >([
          ['isSigner', bool()],
          ['isWritable', bool()],
        ]),
      ],
      [
        'PreconfiguredAsset',
        struct<GetDataEnumKindContent<BaseExtraAccount, 'PreconfiguredAsset'>>([
          ['isSigner', bool()],
          ['isWritable', bool()],
        ]),
      ],
      [
        'CustomPda',
        struct<GetDataEnumKindContent<BaseExtraAccount, 'CustomPda'>>([
          ['seeds', array(getBaseSeedSerializer())],
          ['customProgramId', option(publicKeySerializer())],
          ['isSigner', bool()],
          ['isWritable', bool()],
        ]),
      ],
      [
        'Address',
        struct<GetDataEnumKindContent<BaseExtraAccount, 'Address'>>([
          ['address', publicKeySerializer()],
          ['isSigner', bool()],
          ['isWritable', bool()],
        ]),
      ],
    ],
    { description: 'BaseExtraAccount' }
  ) as Serializer<BaseExtraAccountArgs, BaseExtraAccount>;
}

// Data Enum Helpers.
export function baseExtraAccount(
  kind: 'PreconfiguredProgram',
  data: GetDataEnumKindContent<BaseExtraAccountArgs, 'PreconfiguredProgram'>
): GetDataEnumKind<BaseExtraAccountArgs, 'PreconfiguredProgram'>;
export function baseExtraAccount(
  kind: 'PreconfiguredCollection',
  data: GetDataEnumKindContent<BaseExtraAccountArgs, 'PreconfiguredCollection'>
): GetDataEnumKind<BaseExtraAccountArgs, 'PreconfiguredCollection'>;
export function baseExtraAccount(
  kind: 'PreconfiguredOwner',
  data: GetDataEnumKindContent<BaseExtraAccountArgs, 'PreconfiguredOwner'>
): GetDataEnumKind<BaseExtraAccountArgs, 'PreconfiguredOwner'>;
export function baseExtraAccount(
  kind: 'PreconfiguredRecipient',
  data: GetDataEnumKindContent<BaseExtraAccountArgs, 'PreconfiguredRecipient'>
): GetDataEnumKind<BaseExtraAccountArgs, 'PreconfiguredRecipient'>;
export function baseExtraAccount(
  kind: 'PreconfiguredAsset',
  data: GetDataEnumKindContent<BaseExtraAccountArgs, 'PreconfiguredAsset'>
): GetDataEnumKind<BaseExtraAccountArgs, 'PreconfiguredAsset'>;
export function baseExtraAccount(
  kind: 'CustomPda',
  data: GetDataEnumKindContent<BaseExtraAccountArgs, 'CustomPda'>
): GetDataEnumKind<BaseExtraAccountArgs, 'CustomPda'>;
export function baseExtraAccount(
  kind: 'Address',
  data: GetDataEnumKindContent<BaseExtraAccountArgs, 'Address'>
): GetDataEnumKind<BaseExtraAccountArgs, 'Address'>;
export function baseExtraAccount<K extends BaseExtraAccountArgs['__kind']>(
  kind: K,
  data?: any
): Extract<BaseExtraAccountArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isBaseExtraAccount<K extends BaseExtraAccount['__kind']>(
  kind: K,
  value: BaseExtraAccount
): value is BaseExtraAccount & { __kind: K } {
  return value.__kind === kind;
}
