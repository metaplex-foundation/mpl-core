/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable, PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  option,
  publicKey as publicKeySerializer,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  BaseExtraAccount,
  BaseExtraAccountArgs,
  BasePluginAuthority,
  BasePluginAuthorityArgs,
  ExternalCheckResult,
  ExternalCheckResultArgs,
  ExternalPluginAdapterSchema,
  ExternalPluginAdapterSchemaArgs,
  HookableLifecycleEvent,
  HookableLifecycleEventArgs,
  getBaseExtraAccountSerializer,
  getBasePluginAuthoritySerializer,
  getExternalCheckResultSerializer,
  getExternalPluginAdapterSchemaSerializer,
  getHookableLifecycleEventSerializer,
} from '.';

export type BaseLinkedLifecycleHookInitInfo = {
  hookedProgram: PublicKey;
  initPluginAuthority: Option<BasePluginAuthority>;
  lifecycleChecks: Array<[HookableLifecycleEvent, ExternalCheckResult]>;
  extraAccounts: Option<Array<BaseExtraAccount>>;
  dataAuthority: Option<BasePluginAuthority>;
  schema: Option<ExternalPluginAdapterSchema>;
};

export type BaseLinkedLifecycleHookInitInfoArgs = {
  hookedProgram: PublicKey;
  initPluginAuthority: OptionOrNullable<BasePluginAuthorityArgs>;
  lifecycleChecks: Array<[HookableLifecycleEventArgs, ExternalCheckResultArgs]>;
  extraAccounts: OptionOrNullable<Array<BaseExtraAccountArgs>>;
  dataAuthority: OptionOrNullable<BasePluginAuthorityArgs>;
  schema: OptionOrNullable<ExternalPluginAdapterSchemaArgs>;
};

export function getBaseLinkedLifecycleHookInitInfoSerializer(): Serializer<
  BaseLinkedLifecycleHookInitInfoArgs,
  BaseLinkedLifecycleHookInitInfo
> {
  return struct<BaseLinkedLifecycleHookInitInfo>(
    [
      ['hookedProgram', publicKeySerializer()],
      ['initPluginAuthority', option(getBasePluginAuthoritySerializer())],
      [
        'lifecycleChecks',
        array(
          tuple([
            getHookableLifecycleEventSerializer(),
            getExternalCheckResultSerializer(),
          ])
        ),
      ],
      ['extraAccounts', option(array(getBaseExtraAccountSerializer()))],
      ['dataAuthority', option(getBasePluginAuthoritySerializer())],
      ['schema', option(getExternalPluginAdapterSchemaSerializer())],
    ],
    { description: 'BaseLinkedLifecycleHookInitInfo' }
  ) as Serializer<
    BaseLinkedLifecycleHookInitInfoArgs,
    BaseLinkedLifecycleHookInitInfo
  >;
}
