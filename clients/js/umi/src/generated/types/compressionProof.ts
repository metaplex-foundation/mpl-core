/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  BaseUpdateAuthority,
  BaseUpdateAuthorityArgs,
  HashablePluginSchema,
  HashablePluginSchemaArgs,
  getBaseUpdateAuthoritySerializer,
  getHashablePluginSchemaSerializer,
} from '.';

export type CompressionProof = {
  owner: PublicKey;
  updateAuthority: BaseUpdateAuthority;
  name: string;
  uri: string;
  seq: bigint;
  plugins: Array<HashablePluginSchema>;
};

export type CompressionProofArgs = {
  owner: PublicKey;
  updateAuthority: BaseUpdateAuthorityArgs;
  name: string;
  uri: string;
  seq: number | bigint;
  plugins: Array<HashablePluginSchemaArgs>;
};

export function getCompressionProofSerializer(): Serializer<
  CompressionProofArgs,
  CompressionProof
> {
  return struct<CompressionProof>(
    [
      ['owner', publicKeySerializer()],
      ['updateAuthority', getBaseUpdateAuthoritySerializer()],
      ['name', string()],
      ['uri', string()],
      ['seq', u64()],
      ['plugins', array(getHashablePluginSchemaSerializer())],
    ],
    { description: 'CompressionProof' }
  ) as Serializer<CompressionProofArgs, CompressionProof>;
}
