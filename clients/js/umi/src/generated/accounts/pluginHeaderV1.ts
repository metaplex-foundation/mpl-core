/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import { Serializer, struct, u64 } from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type PluginHeaderV1 = Account<PluginHeaderV1AccountData>;

export type PluginHeaderV1AccountData = {
  key: Key;
  pluginRegistryOffset: bigint;
};

export type PluginHeaderV1AccountDataArgs = {
  key: KeyArgs;
  pluginRegistryOffset: number | bigint;
};

export function getPluginHeaderV1AccountDataSerializer(): Serializer<
  PluginHeaderV1AccountDataArgs,
  PluginHeaderV1AccountData
> {
  return struct<PluginHeaderV1AccountData>(
    [
      ['key', getKeySerializer()],
      ['pluginRegistryOffset', u64()],
    ],
    { description: 'PluginHeaderV1AccountData' }
  ) as Serializer<PluginHeaderV1AccountDataArgs, PluginHeaderV1AccountData>;
}

export function deserializePluginHeaderV1(
  rawAccount: RpcAccount
): PluginHeaderV1 {
  return deserializeAccount(
    rawAccount,
    getPluginHeaderV1AccountDataSerializer()
  );
}

export async function fetchPluginHeaderV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PluginHeaderV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'PluginHeaderV1');
  return deserializePluginHeaderV1(maybeAccount);
}

export async function safeFetchPluginHeaderV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PluginHeaderV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePluginHeaderV1(maybeAccount) : null;
}

export async function fetchAllPluginHeaderV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PluginHeaderV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PluginHeaderV1');
    return deserializePluginHeaderV1(maybeAccount);
  });
}

export async function safeFetchAllPluginHeaderV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PluginHeaderV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializePluginHeaderV1(maybeAccount as RpcAccount)
    );
}

export function getPluginHeaderV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ key: KeyArgs; pluginRegistryOffset: number | bigint }>({
      key: [0, getKeySerializer()],
      pluginRegistryOffset: [1, u64()],
    })
    .deserializeUsing<PluginHeaderV1>((account) =>
      deserializePluginHeaderV1(account)
    );
}

export function getPluginHeaderV1Size(): number {
  return 9;
}
