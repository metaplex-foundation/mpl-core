/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  option,
  publicKey as publicKeySerializer,
  string,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  AssetV1AccountData,
  getAssetV1AccountDataSerializer,
} from '../../hooked';
import {
  BaseUpdateAuthorityArgs,
  KeyArgs,
  getBaseUpdateAuthoritySerializer,
  getKeySerializer,
} from '../types';

export type AssetV1 = Account<AssetV1AccountData>;

export function deserializeAssetV1(rawAccount: RpcAccount): AssetV1 {
  return deserializeAccount(rawAccount, getAssetV1AccountDataSerializer());
}

export async function fetchAssetV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AssetV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'AssetV1');
  return deserializeAssetV1(maybeAccount);
}

export async function safeFetchAssetV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AssetV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeAssetV1(maybeAccount) : null;
}

export async function fetchAllAssetV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AssetV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'AssetV1');
    return deserializeAssetV1(maybeAccount);
  });
}

export async function safeFetchAllAssetV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AssetV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeAssetV1(maybeAccount as RpcAccount));
}

export function getAssetV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      owner: PublicKey;
      updateAuthority: BaseUpdateAuthorityArgs;
      name: string;
      uri: string;
      seq: OptionOrNullable<number | bigint>;
    }>({
      key: [0, getKeySerializer()],
      owner: [1, publicKeySerializer()],
      updateAuthority: [33, getBaseUpdateAuthoritySerializer()],
      name: [null, string()],
      uri: [null, string()],
      seq: [null, option(u64())],
    })
    .deserializeUsing<AssetV1>((account) => deserializeAssetV1(account));
}
