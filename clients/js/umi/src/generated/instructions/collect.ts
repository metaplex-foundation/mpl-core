/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type CollectInstructionAccounts = {
  /** The address of the recipient 1 */
  recipient1?: PublicKey | Pda;
  /** The address of the recipient 2 */
  recipient2?: PublicKey | Pda;
};

// Data.
export type CollectInstructionData = { discriminator: number };

export type CollectInstructionDataArgs = {};

export function getCollectInstructionDataSerializer(): Serializer<
  CollectInstructionDataArgs,
  CollectInstructionData
> {
  return mapSerializer<CollectInstructionDataArgs, any, CollectInstructionData>(
    struct<CollectInstructionData>([['discriminator', u8()]], {
      description: 'CollectInstructionData',
    }),
    (value) => ({ ...value, discriminator: 19 })
  ) as Serializer<CollectInstructionDataArgs, CollectInstructionData>;
}

// Instruction.
export function collect(
  context: Pick<Context, 'programs'>,
  input: CollectInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );

  // Accounts.
  const resolvedAccounts = {
    recipient1: {
      index: 0,
      isWritable: true as boolean,
      value: input.recipient1 ?? null,
    },
    recipient2: {
      index: 1,
      isWritable: true as boolean,
      value: input.recipient2 ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.recipient1.value) {
    resolvedAccounts.recipient1.value = publicKey(
      '8AT6o8Qk5T9QnZvPThMrF9bcCQLTGkyGvVZZzHgCw11v'
    );
  }
  if (!resolvedAccounts.recipient2.value) {
    resolvedAccounts.recipient2.value = publicKey(
      'MmHsqX4LxTfifxoH8BVRLUKrwDn1LPCac6YcCZTHhwt'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCollectInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
