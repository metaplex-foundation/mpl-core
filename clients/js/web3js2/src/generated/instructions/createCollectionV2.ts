/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  none,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/kit';
import { MPL_CORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getExternalPluginAdapterInitInfoDecoder,
  getExternalPluginAdapterInitInfoEncoder,
  getPluginAuthorityPairDecoder,
  getPluginAuthorityPairEncoder,
  type ExternalPluginAdapterInitInfo,
  type ExternalPluginAdapterInitInfoArgs,
  type PluginAuthorityPair,
  type PluginAuthorityPairArgs,
} from '../types';

export const CREATE_COLLECTION_V2_DISCRIMINATOR = 21;

export function getCreateCollectionV2DiscriminatorBytes() {
  return getU8Encoder().encode(CREATE_COLLECTION_V2_DISCRIMINATOR);
}

export type CreateCollectionV2Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountCollection extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthority extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCollection extends string
        ? WritableSignerAccount<TAccountCollection> &
            IAccountSignerMeta<TAccountCollection>
        : TAccountCollection,
      TAccountUpdateAuthority extends string
        ? ReadonlyAccount<TAccountUpdateAuthority>
        : TAccountUpdateAuthority,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateCollectionV2InstructionData = {
  discriminator: number;
  name: string;
  uri: string;
  plugins: Option<Array<PluginAuthorityPair>>;
  externalPluginAdapters: Option<Array<ExternalPluginAdapterInitInfo>>;
};

export type CreateCollectionV2InstructionDataArgs = {
  name: string;
  uri: string;
  plugins?: OptionOrNullable<Array<PluginAuthorityPairArgs>>;
  externalPluginAdapters?: OptionOrNullable<
    Array<ExternalPluginAdapterInitInfoArgs>
  >;
};

export function getCreateCollectionV2InstructionDataEncoder(): Encoder<CreateCollectionV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'plugins',
        getOptionEncoder(getArrayEncoder(getPluginAuthorityPairEncoder())),
      ],
      [
        'externalPluginAdapters',
        getOptionEncoder(
          getArrayEncoder(getExternalPluginAdapterInitInfoEncoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_COLLECTION_V2_DISCRIMINATOR,
      plugins: value.plugins ?? none(),
      externalPluginAdapters: value.externalPluginAdapters ?? [],
    })
  );
}

export function getCreateCollectionV2InstructionDataDecoder(): Decoder<CreateCollectionV2InstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'plugins',
      getOptionDecoder(getArrayDecoder(getPluginAuthorityPairDecoder())),
    ],
    [
      'externalPluginAdapters',
      getOptionDecoder(
        getArrayDecoder(getExternalPluginAdapterInitInfoDecoder())
      ),
    ],
  ]);
}

export function getCreateCollectionV2InstructionDataCodec(): Codec<
  CreateCollectionV2InstructionDataArgs,
  CreateCollectionV2InstructionData
> {
  return combineCodec(
    getCreateCollectionV2InstructionDataEncoder(),
    getCreateCollectionV2InstructionDataDecoder()
  );
}

export type CreateCollectionV2Input<
  TAccountCollection extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The address of the new asset */
  collection: TransactionSigner<TAccountCollection>;
  /** The authority of the new asset */
  updateAuthority?: Address<TAccountUpdateAuthority>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  name: CreateCollectionV2InstructionDataArgs['name'];
  uri: CreateCollectionV2InstructionDataArgs['uri'];
  plugins?: CreateCollectionV2InstructionDataArgs['plugins'];
  externalPluginAdapters?: CreateCollectionV2InstructionDataArgs['externalPluginAdapters'];
};

export function getCreateCollectionV2Instruction<
  TAccountCollection extends string,
  TAccountUpdateAuthority extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MPL_CORE_PROGRAM_ADDRESS,
>(
  input: CreateCollectionV2Input<
    TAccountCollection,
    TAccountUpdateAuthority,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateCollectionV2Instruction<
  TProgramAddress,
  TAccountCollection,
  TAccountUpdateAuthority,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? MPL_CORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    collection: { value: input.collection ?? null, isWritable: true },
    updateAuthority: {
      value: input.updateAuthority ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.updateAuthority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateCollectionV2InstructionDataEncoder().encode(
      args as CreateCollectionV2InstructionDataArgs
    ),
  } as CreateCollectionV2Instruction<
    TProgramAddress,
    TAccountCollection,
    TAccountUpdateAuthority,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateCollectionV2Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The address of the new asset */
    collection: TAccountMetas[0];
    /** The authority of the new asset */
    updateAuthority?: TAccountMetas[1] | undefined;
    /** The account paying for the storage fees */
    payer: TAccountMetas[2];
    /** The system program */
    systemProgram: TAccountMetas[3];
  };
  data: CreateCollectionV2InstructionData;
};

export function parseCreateCollectionV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateCollectionV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_CORE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      collection: getNextAccount(),
      updateAuthority: getNextOptionalAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateCollectionV2InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
