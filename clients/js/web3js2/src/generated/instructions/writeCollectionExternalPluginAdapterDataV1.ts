/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MPL_CORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getExternalPluginAdapterKeyDecoder,
  getExternalPluginAdapterKeyEncoder,
  type ExternalPluginAdapterKey,
  type ExternalPluginAdapterKeyArgs,
} from '../types';

export const WRITE_COLLECTION_EXTERNAL_PLUGIN_ADAPTER_DATA_V1_DISCRIMINATOR = 29;

export function getWriteCollectionExternalPluginAdapterDataV1DiscriminatorBytes() {
  return getU8Encoder().encode(
    WRITE_COLLECTION_EXTERNAL_PLUGIN_ADAPTER_DATA_V1_DISCRIMINATOR
  );
}

export type WriteCollectionExternalPluginAdapterDataV1Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountCollection extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountBuffer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountLogWrapper extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCollection extends string
        ? WritableAccount<TAccountCollection>
        : TAccountCollection,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountBuffer extends string
        ? ReadonlyAccount<TAccountBuffer>
        : TAccountBuffer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      ...TRemainingAccounts,
    ]
  >;

export type WriteCollectionExternalPluginAdapterDataV1InstructionData = {
  discriminator: number;
  key: ExternalPluginAdapterKey;
  data: Option<ReadonlyUint8Array>;
};

export type WriteCollectionExternalPluginAdapterDataV1InstructionDataArgs = {
  key: ExternalPluginAdapterKeyArgs;
  data: OptionOrNullable<ReadonlyUint8Array>;
};

export function getWriteCollectionExternalPluginAdapterDataV1InstructionDataEncoder(): Encoder<WriteCollectionExternalPluginAdapterDataV1InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['key', getExternalPluginAdapterKeyEncoder()],
      [
        'data',
        getOptionEncoder(
          addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator:
        WRITE_COLLECTION_EXTERNAL_PLUGIN_ADAPTER_DATA_V1_DISCRIMINATOR,
    })
  );
}

export function getWriteCollectionExternalPluginAdapterDataV1InstructionDataDecoder(): Decoder<WriteCollectionExternalPluginAdapterDataV1InstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['key', getExternalPluginAdapterKeyDecoder()],
    [
      'data',
      getOptionDecoder(
        addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())
      ),
    ],
  ]);
}

export function getWriteCollectionExternalPluginAdapterDataV1InstructionDataCodec(): Codec<
  WriteCollectionExternalPluginAdapterDataV1InstructionDataArgs,
  WriteCollectionExternalPluginAdapterDataV1InstructionData
> {
  return combineCodec(
    getWriteCollectionExternalPluginAdapterDataV1InstructionDataEncoder(),
    getWriteCollectionExternalPluginAdapterDataV1InstructionDataDecoder()
  );
}

export type WriteCollectionExternalPluginAdapterDataV1Input<
  TAccountCollection extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountBuffer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountLogWrapper extends string = string,
> = {
  /** The address of the asset */
  collection: Address<TAccountCollection>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The Data Authority of the External Plugin Adapter */
  authority?: TransactionSigner<TAccountAuthority>;
  /** The buffer to write to the external plugin */
  buffer?: Address<TAccountBuffer>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** The SPL Noop Program */
  logWrapper?: Address<TAccountLogWrapper>;
  key: WriteCollectionExternalPluginAdapterDataV1InstructionDataArgs['key'];
  data: WriteCollectionExternalPluginAdapterDataV1InstructionDataArgs['data'];
};

export function getWriteCollectionExternalPluginAdapterDataV1Instruction<
  TAccountCollection extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountBuffer extends string,
  TAccountSystemProgram extends string,
  TAccountLogWrapper extends string,
  TProgramAddress extends Address = typeof MPL_CORE_PROGRAM_ADDRESS,
>(
  input: WriteCollectionExternalPluginAdapterDataV1Input<
    TAccountCollection,
    TAccountPayer,
    TAccountAuthority,
    TAccountBuffer,
    TAccountSystemProgram,
    TAccountLogWrapper
  >,
  config?: { programAddress?: TProgramAddress }
): WriteCollectionExternalPluginAdapterDataV1Instruction<
  TProgramAddress,
  TAccountCollection,
  TAccountPayer,
  TAccountAuthority,
  TAccountBuffer,
  TAccountSystemProgram,
  TAccountLogWrapper
> {
  // Program address.
  const programAddress = config?.programAddress ?? MPL_CORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    collection: { value: input.collection ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    buffer: { value: input.buffer ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.buffer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.logWrapper),
    ],
    programAddress,
    data: getWriteCollectionExternalPluginAdapterDataV1InstructionDataEncoder().encode(
      args as WriteCollectionExternalPluginAdapterDataV1InstructionDataArgs
    ),
  } as WriteCollectionExternalPluginAdapterDataV1Instruction<
    TProgramAddress,
    TAccountCollection,
    TAccountPayer,
    TAccountAuthority,
    TAccountBuffer,
    TAccountSystemProgram,
    TAccountLogWrapper
  >;

  return instruction;
}

export type ParsedWriteCollectionExternalPluginAdapterDataV1Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The address of the asset */
    collection: TAccountMetas[0];
    /** The account paying for the storage fees */
    payer: TAccountMetas[1];
    /** The Data Authority of the External Plugin Adapter */
    authority?: TAccountMetas[2] | undefined;
    /** The buffer to write to the external plugin */
    buffer?: TAccountMetas[3] | undefined;
    /** The system program */
    systemProgram: TAccountMetas[4];
    /** The SPL Noop Program */
    logWrapper?: TAccountMetas[5] | undefined;
  };
  data: WriteCollectionExternalPluginAdapterDataV1InstructionData;
};

export function parseWriteCollectionExternalPluginAdapterDataV1Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWriteCollectionExternalPluginAdapterDataV1Instruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_CORE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      collection: getNextAccount(),
      payer: getNextAccount(),
      authority: getNextOptionalAccount(),
      buffer: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      logWrapper: getNextOptionalAccount(),
    },
    data: getWriteCollectionExternalPluginAdapterDataV1InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
