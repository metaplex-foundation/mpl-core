/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type WritableAccount,
} from '@solana/kit';
import { MPL_CORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COLLECT_DISCRIMINATOR = 19;

export function getCollectDiscriminatorBytes() {
  return getU8Encoder().encode(COLLECT_DISCRIMINATOR);
}

export type CollectInstruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountRecipient1 extends
    | string
    | IAccountMeta<string> = '8AT6o8Qk5T9QnZvPThMrF9bcCQLTGkyGvVZZzHgCw11v',
  TAccountRecipient2 extends
    | string
    | IAccountMeta<string> = 'MmHsqX4LxTfifxoH8BVRLUKrwDn1LPCac6YcCZTHhwt',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRecipient1 extends string
        ? WritableAccount<TAccountRecipient1>
        : TAccountRecipient1,
      TAccountRecipient2 extends string
        ? WritableAccount<TAccountRecipient2>
        : TAccountRecipient2,
      ...TRemainingAccounts,
    ]
  >;

export type CollectInstructionData = { discriminator: number };

export type CollectInstructionDataArgs = {};

export function getCollectInstructionDataEncoder(): Encoder<CollectInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: COLLECT_DISCRIMINATOR })
  );
}

export function getCollectInstructionDataDecoder(): Decoder<CollectInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCollectInstructionDataCodec(): Codec<
  CollectInstructionDataArgs,
  CollectInstructionData
> {
  return combineCodec(
    getCollectInstructionDataEncoder(),
    getCollectInstructionDataDecoder()
  );
}

export type CollectInput<
  TAccountRecipient1 extends string = string,
  TAccountRecipient2 extends string = string,
> = {
  /** The address of the recipient 1 */
  recipient1?: Address<TAccountRecipient1>;
  /** The address of the recipient 2 */
  recipient2?: Address<TAccountRecipient2>;
};

export function getCollectInstruction<
  TAccountRecipient1 extends string,
  TAccountRecipient2 extends string,
  TProgramAddress extends Address = typeof MPL_CORE_PROGRAM_ADDRESS,
>(
  input: CollectInput<TAccountRecipient1, TAccountRecipient2>,
  config?: { programAddress?: TProgramAddress }
): CollectInstruction<TProgramAddress, TAccountRecipient1, TAccountRecipient2> {
  // Program address.
  const programAddress = config?.programAddress ?? MPL_CORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    recipient1: { value: input.recipient1 ?? null, isWritable: true },
    recipient2: { value: input.recipient2 ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.recipient1.value) {
    accounts.recipient1.value =
      '8AT6o8Qk5T9QnZvPThMrF9bcCQLTGkyGvVZZzHgCw11v' as Address<'8AT6o8Qk5T9QnZvPThMrF9bcCQLTGkyGvVZZzHgCw11v'>;
  }
  if (!accounts.recipient2.value) {
    accounts.recipient2.value =
      'MmHsqX4LxTfifxoH8BVRLUKrwDn1LPCac6YcCZTHhwt' as Address<'MmHsqX4LxTfifxoH8BVRLUKrwDn1LPCac6YcCZTHhwt'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.recipient1),
      getAccountMeta(accounts.recipient2),
    ],
    programAddress,
    data: getCollectInstructionDataEncoder().encode({}),
  } as CollectInstruction<
    TProgramAddress,
    TAccountRecipient1,
    TAccountRecipient2
  >;

  return instruction;
}

export type ParsedCollectInstruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The address of the recipient 1 */
    recipient1: TAccountMetas[0];
    /** The address of the recipient 2 */
    recipient2: TAccountMetas[1];
  };
  data: CollectInstructionData;
};

export function parseCollectInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCollectInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      recipient1: getNextAccount(),
      recipient2: getNextAccount(),
    },
    data: getCollectInstructionDataDecoder().decode(instruction.data),
  };
}
