/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import { getKeyDecoder, getKeyEncoder, type Key, type KeyArgs } from '../types';

export type BaseCollectionV1 = {
  key: Key;
  updateAuthority: Address;
  name: string;
  uri: string;
  numMinted: number;
  currentSize: number;
};

export type BaseCollectionV1Args = {
  key: KeyArgs;
  updateAuthority: Address;
  name: string;
  uri: string;
  numMinted: number;
  currentSize: number;
};

export function getBaseCollectionV1Encoder(): Encoder<BaseCollectionV1Args> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['updateAuthority', getAddressEncoder()],
    ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['numMinted', getU32Encoder()],
    ['currentSize', getU32Encoder()],
  ]);
}

export function getBaseCollectionV1Decoder(): Decoder<BaseCollectionV1> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['updateAuthority', getAddressDecoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['numMinted', getU32Decoder()],
    ['currentSize', getU32Decoder()],
  ]);
}

export function getBaseCollectionV1Codec(): Codec<
  BaseCollectionV1Args,
  BaseCollectionV1
> {
  return combineCodec(
    getBaseCollectionV1Encoder(),
    getBaseCollectionV1Decoder()
  );
}

export function decodeBaseCollectionV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<BaseCollectionV1, TAddress>;
export function decodeBaseCollectionV1<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<BaseCollectionV1, TAddress>;
export function decodeBaseCollectionV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<BaseCollectionV1, TAddress>
  | MaybeAccount<BaseCollectionV1, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBaseCollectionV1Decoder()
  );
}

export async function fetchBaseCollectionV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<BaseCollectionV1, TAddress>> {
  const maybeAccount = await fetchMaybeBaseCollectionV1(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBaseCollectionV1<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<BaseCollectionV1, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBaseCollectionV1(maybeAccount);
}

export async function fetchAllBaseCollectionV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<BaseCollectionV1>[]> {
  const maybeAccounts = await fetchAllMaybeBaseCollectionV1(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBaseCollectionV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<BaseCollectionV1>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeBaseCollectionV1(maybeAccount)
  );
}
