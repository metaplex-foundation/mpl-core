/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import {
  getPluginRegistryV1AccountDataDecoder,
  type PluginRegistryV1AccountData,
} from '../../hooked';

export function decodePluginRegistryV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PluginRegistryV1AccountData, TAddress>;
export function decodePluginRegistryV1<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PluginRegistryV1AccountData, TAddress>;
export function decodePluginRegistryV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<PluginRegistryV1AccountData, TAddress>
  | MaybeAccount<PluginRegistryV1AccountData, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPluginRegistryV1AccountDataDecoder()
  );
}

export async function fetchPluginRegistryV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PluginRegistryV1AccountData, TAddress>> {
  const maybeAccount = await fetchMaybePluginRegistryV1(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePluginRegistryV1<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PluginRegistryV1AccountData, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePluginRegistryV1(maybeAccount);
}

export async function fetchAllPluginRegistryV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PluginRegistryV1AccountData>[]> {
  const maybeAccounts = await fetchAllMaybePluginRegistryV1(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePluginRegistryV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PluginRegistryV1AccountData>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodePluginRegistryV1(maybeAccount)
  );
}
