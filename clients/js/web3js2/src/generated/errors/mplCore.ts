/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { MPL_CORE_PROGRAM_ADDRESS } from '../programs';

/** InvalidSystemProgram: Invalid System Program */
export const MPL_CORE_ERROR__INVALID_SYSTEM_PROGRAM = 0x0; // 0
/** DeserializationError: Error deserializing account */
export const MPL_CORE_ERROR__DESERIALIZATION_ERROR = 0x1; // 1
/** SerializationError: Error serializing account */
export const MPL_CORE_ERROR__SERIALIZATION_ERROR = 0x2; // 2
/** PluginsNotInitialized: Plugins not initialized */
export const MPL_CORE_ERROR__PLUGINS_NOT_INITIALIZED = 0x3; // 3
/** PluginNotFound: Plugin not found */
export const MPL_CORE_ERROR__PLUGIN_NOT_FOUND = 0x4; // 4
/** NumericalOverflow: Numerical Overflow */
export const MPL_CORE_ERROR__NUMERICAL_OVERFLOW = 0x5; // 5
/** IncorrectAccount: Incorrect account */
export const MPL_CORE_ERROR__INCORRECT_ACCOUNT = 0x6; // 6
/** IncorrectAssetHash: Incorrect asset hash */
export const MPL_CORE_ERROR__INCORRECT_ASSET_HASH = 0x7; // 7
/** InvalidPlugin: Invalid Plugin */
export const MPL_CORE_ERROR__INVALID_PLUGIN = 0x8; // 8
/** InvalidAuthority: Invalid Authority */
export const MPL_CORE_ERROR__INVALID_AUTHORITY = 0x9; // 9
/** AssetIsFrozen: Cannot transfer a frozen asset */
export const MPL_CORE_ERROR__ASSET_IS_FROZEN = 0xa; // 10
/** MissingCompressionProof: Missing compression proof */
export const MPL_CORE_ERROR__MISSING_COMPRESSION_PROOF = 0xb; // 11
/** CannotMigrateMasterWithSupply: Cannot migrate a master edition used for prints */
export const MPL_CORE_ERROR__CANNOT_MIGRATE_MASTER_WITH_SUPPLY = 0xc; // 12
/** CannotMigratePrints: Cannot migrate a print edition */
export const MPL_CORE_ERROR__CANNOT_MIGRATE_PRINTS = 0xd; // 13
/** CannotBurnCollection: Cannot burn a collection NFT */
export const MPL_CORE_ERROR__CANNOT_BURN_COLLECTION = 0xe; // 14
/** PluginAlreadyExists: Plugin already exists */
export const MPL_CORE_ERROR__PLUGIN_ALREADY_EXISTS = 0xf; // 15
/** NumericalOverflowError: Numerical overflow */
export const MPL_CORE_ERROR__NUMERICAL_OVERFLOW_ERROR = 0x10; // 16
/** AlreadyCompressed: Already compressed account */
export const MPL_CORE_ERROR__ALREADY_COMPRESSED = 0x11; // 17
/** AlreadyDecompressed: Already decompressed account */
export const MPL_CORE_ERROR__ALREADY_DECOMPRESSED = 0x12; // 18
/** InvalidCollection: Invalid Collection passed in */
export const MPL_CORE_ERROR__INVALID_COLLECTION = 0x13; // 19
/** MissingUpdateAuthority: Missing update authority */
export const MPL_CORE_ERROR__MISSING_UPDATE_AUTHORITY = 0x14; // 20
/** MissingNewOwner: Missing new owner */
export const MPL_CORE_ERROR__MISSING_NEW_OWNER = 0x15; // 21
/** MissingSystemProgram: Missing system program */
export const MPL_CORE_ERROR__MISSING_SYSTEM_PROGRAM = 0x16; // 22
/** NotAvailable: Feature not available */
export const MPL_CORE_ERROR__NOT_AVAILABLE = 0x17; // 23
/** InvalidAsset: Invalid Asset passed in */
export const MPL_CORE_ERROR__INVALID_ASSET = 0x18; // 24
/** MissingCollection: Missing collection */
export const MPL_CORE_ERROR__MISSING_COLLECTION = 0x19; // 25
/** NoApprovals: Neither the asset or any plugins have approved this operation */
export const MPL_CORE_ERROR__NO_APPROVALS = 0x1a; // 26
/** CannotRedelegate: Plugin Manager cannot redelegate a delegated plugin without revoking first */
export const MPL_CORE_ERROR__CANNOT_REDELEGATE = 0x1b; // 27
/** InvalidPluginSetting: Invalid setting for plugin */
export const MPL_CORE_ERROR__INVALID_PLUGIN_SETTING = 0x1c; // 28
/** ConflictingAuthority: Cannot specify both an update authority and collection on an asset */
export const MPL_CORE_ERROR__CONFLICTING_AUTHORITY = 0x1d; // 29
/** InvalidLogWrapperProgram: Invalid Log Wrapper Program */
export const MPL_CORE_ERROR__INVALID_LOG_WRAPPER_PROGRAM = 0x1e; // 30
/** ExternalPluginAdapterNotFound: External Plugin Adapter not found */
export const MPL_CORE_ERROR__EXTERNAL_PLUGIN_ADAPTER_NOT_FOUND = 0x1f; // 31
/** ExternalPluginAdapterAlreadyExists: External Plugin Adapter already exists */
export const MPL_CORE_ERROR__EXTERNAL_PLUGIN_ADAPTER_ALREADY_EXISTS = 0x20; // 32
/** MissingAsset: Missing asset needed for extra account PDA derivation */
export const MPL_CORE_ERROR__MISSING_ASSET = 0x21; // 33
/** MissingExternalPluginAdapterAccount: Missing account needed for external plugin adapter */
export const MPL_CORE_ERROR__MISSING_EXTERNAL_PLUGIN_ADAPTER_ACCOUNT = 0x22; // 34
/** OracleCanRejectOnly: Oracle external plugin adapter can only be configured to reject */
export const MPL_CORE_ERROR__ORACLE_CAN_REJECT_ONLY = 0x23; // 35
/** RequiresLifecycleCheck: External plugin adapter must have at least one lifecycle check */
export const MPL_CORE_ERROR__REQUIRES_LIFECYCLE_CHECK = 0x24; // 36
/** DuplicateLifecycleChecks: Duplicate lifecycle checks were provided for external plugin adapter  */
export const MPL_CORE_ERROR__DUPLICATE_LIFECYCLE_CHECKS = 0x25; // 37
/** InvalidOracleAccountData: Could not read from oracle account */
export const MPL_CORE_ERROR__INVALID_ORACLE_ACCOUNT_DATA = 0x26; // 38
/** UninitializedOracleAccount: Oracle account is uninitialized */
export const MPL_CORE_ERROR__UNINITIALIZED_ORACLE_ACCOUNT = 0x27; // 39
/** MissingSigner: Missing required signer for operation */
export const MPL_CORE_ERROR__MISSING_SIGNER = 0x28; // 40
/** InvalidPluginOperation: Invalid plugin operation */
export const MPL_CORE_ERROR__INVALID_PLUGIN_OPERATION = 0x29; // 41
/** CollectionMustBeEmpty: Collection must be empty to be burned */
export const MPL_CORE_ERROR__COLLECTION_MUST_BE_EMPTY = 0x2a; // 42
/** TwoDataSources: Two data sources provided, only one is allowed */
export const MPL_CORE_ERROR__TWO_DATA_SOURCES = 0x2b; // 43
/** UnsupportedOperation: External Plugin does not support this operation */
export const MPL_CORE_ERROR__UNSUPPORTED_OPERATION = 0x2c; // 44
/** NoDataSources: No data sources provided, one is required */
export const MPL_CORE_ERROR__NO_DATA_SOURCES = 0x2d; // 45
/** InvalidPluginAdapterTarget: This plugin adapter cannot be added to an Asset */
export const MPL_CORE_ERROR__INVALID_PLUGIN_ADAPTER_TARGET = 0x2e; // 46
/** CannotAddDataSection: Cannot add a Data Section without a linked external plugin */
export const MPL_CORE_ERROR__CANNOT_ADD_DATA_SECTION = 0x2f; // 47
/** PermanentDelegatesPreventMove: Cannot move asset to collection with permanent delegates */
export const MPL_CORE_ERROR__PERMANENT_DELEGATES_PREVENT_MOVE = 0x30; // 48

export type MplCoreError =
  | typeof MPL_CORE_ERROR__ALREADY_COMPRESSED
  | typeof MPL_CORE_ERROR__ALREADY_DECOMPRESSED
  | typeof MPL_CORE_ERROR__ASSET_IS_FROZEN
  | typeof MPL_CORE_ERROR__CANNOT_ADD_DATA_SECTION
  | typeof MPL_CORE_ERROR__CANNOT_BURN_COLLECTION
  | typeof MPL_CORE_ERROR__CANNOT_MIGRATE_MASTER_WITH_SUPPLY
  | typeof MPL_CORE_ERROR__CANNOT_MIGRATE_PRINTS
  | typeof MPL_CORE_ERROR__CANNOT_REDELEGATE
  | typeof MPL_CORE_ERROR__COLLECTION_MUST_BE_EMPTY
  | typeof MPL_CORE_ERROR__CONFLICTING_AUTHORITY
  | typeof MPL_CORE_ERROR__DESERIALIZATION_ERROR
  | typeof MPL_CORE_ERROR__DUPLICATE_LIFECYCLE_CHECKS
  | typeof MPL_CORE_ERROR__EXTERNAL_PLUGIN_ADAPTER_ALREADY_EXISTS
  | typeof MPL_CORE_ERROR__EXTERNAL_PLUGIN_ADAPTER_NOT_FOUND
  | typeof MPL_CORE_ERROR__INCORRECT_ACCOUNT
  | typeof MPL_CORE_ERROR__INCORRECT_ASSET_HASH
  | typeof MPL_CORE_ERROR__INVALID_ASSET
  | typeof MPL_CORE_ERROR__INVALID_AUTHORITY
  | typeof MPL_CORE_ERROR__INVALID_COLLECTION
  | typeof MPL_CORE_ERROR__INVALID_LOG_WRAPPER_PROGRAM
  | typeof MPL_CORE_ERROR__INVALID_ORACLE_ACCOUNT_DATA
  | typeof MPL_CORE_ERROR__INVALID_PLUGIN
  | typeof MPL_CORE_ERROR__INVALID_PLUGIN_ADAPTER_TARGET
  | typeof MPL_CORE_ERROR__INVALID_PLUGIN_OPERATION
  | typeof MPL_CORE_ERROR__INVALID_PLUGIN_SETTING
  | typeof MPL_CORE_ERROR__INVALID_SYSTEM_PROGRAM
  | typeof MPL_CORE_ERROR__MISSING_ASSET
  | typeof MPL_CORE_ERROR__MISSING_COLLECTION
  | typeof MPL_CORE_ERROR__MISSING_COMPRESSION_PROOF
  | typeof MPL_CORE_ERROR__MISSING_EXTERNAL_PLUGIN_ADAPTER_ACCOUNT
  | typeof MPL_CORE_ERROR__MISSING_NEW_OWNER
  | typeof MPL_CORE_ERROR__MISSING_SIGNER
  | typeof MPL_CORE_ERROR__MISSING_SYSTEM_PROGRAM
  | typeof MPL_CORE_ERROR__MISSING_UPDATE_AUTHORITY
  | typeof MPL_CORE_ERROR__NO_APPROVALS
  | typeof MPL_CORE_ERROR__NO_DATA_SOURCES
  | typeof MPL_CORE_ERROR__NOT_AVAILABLE
  | typeof MPL_CORE_ERROR__NUMERICAL_OVERFLOW
  | typeof MPL_CORE_ERROR__NUMERICAL_OVERFLOW_ERROR
  | typeof MPL_CORE_ERROR__ORACLE_CAN_REJECT_ONLY
  | typeof MPL_CORE_ERROR__PERMANENT_DELEGATES_PREVENT_MOVE
  | typeof MPL_CORE_ERROR__PLUGIN_ALREADY_EXISTS
  | typeof MPL_CORE_ERROR__PLUGIN_NOT_FOUND
  | typeof MPL_CORE_ERROR__PLUGINS_NOT_INITIALIZED
  | typeof MPL_CORE_ERROR__REQUIRES_LIFECYCLE_CHECK
  | typeof MPL_CORE_ERROR__SERIALIZATION_ERROR
  | typeof MPL_CORE_ERROR__TWO_DATA_SOURCES
  | typeof MPL_CORE_ERROR__UNINITIALIZED_ORACLE_ACCOUNT
  | typeof MPL_CORE_ERROR__UNSUPPORTED_OPERATION;

let mplCoreErrorMessages: Record<MplCoreError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  mplCoreErrorMessages = {
    [MPL_CORE_ERROR__ALREADY_COMPRESSED]: `Already compressed account`,
    [MPL_CORE_ERROR__ALREADY_DECOMPRESSED]: `Already decompressed account`,
    [MPL_CORE_ERROR__ASSET_IS_FROZEN]: `Cannot transfer a frozen asset`,
    [MPL_CORE_ERROR__CANNOT_ADD_DATA_SECTION]: `Cannot add a Data Section without a linked external plugin`,
    [MPL_CORE_ERROR__CANNOT_BURN_COLLECTION]: `Cannot burn a collection NFT`,
    [MPL_CORE_ERROR__CANNOT_MIGRATE_MASTER_WITH_SUPPLY]: `Cannot migrate a master edition used for prints`,
    [MPL_CORE_ERROR__CANNOT_MIGRATE_PRINTS]: `Cannot migrate a print edition`,
    [MPL_CORE_ERROR__CANNOT_REDELEGATE]: `Plugin Manager cannot redelegate a delegated plugin without revoking first`,
    [MPL_CORE_ERROR__COLLECTION_MUST_BE_EMPTY]: `Collection must be empty to be burned`,
    [MPL_CORE_ERROR__CONFLICTING_AUTHORITY]: `Cannot specify both an update authority and collection on an asset`,
    [MPL_CORE_ERROR__DESERIALIZATION_ERROR]: `Error deserializing account`,
    [MPL_CORE_ERROR__DUPLICATE_LIFECYCLE_CHECKS]: `Duplicate lifecycle checks were provided for external plugin adapter `,
    [MPL_CORE_ERROR__EXTERNAL_PLUGIN_ADAPTER_ALREADY_EXISTS]: `External Plugin Adapter already exists`,
    [MPL_CORE_ERROR__EXTERNAL_PLUGIN_ADAPTER_NOT_FOUND]: `External Plugin Adapter not found`,
    [MPL_CORE_ERROR__INCORRECT_ACCOUNT]: `Incorrect account`,
    [MPL_CORE_ERROR__INCORRECT_ASSET_HASH]: `Incorrect asset hash`,
    [MPL_CORE_ERROR__INVALID_ASSET]: `Invalid Asset passed in`,
    [MPL_CORE_ERROR__INVALID_AUTHORITY]: `Invalid Authority`,
    [MPL_CORE_ERROR__INVALID_COLLECTION]: `Invalid Collection passed in`,
    [MPL_CORE_ERROR__INVALID_LOG_WRAPPER_PROGRAM]: `Invalid Log Wrapper Program`,
    [MPL_CORE_ERROR__INVALID_ORACLE_ACCOUNT_DATA]: `Could not read from oracle account`,
    [MPL_CORE_ERROR__INVALID_PLUGIN]: `Invalid Plugin`,
    [MPL_CORE_ERROR__INVALID_PLUGIN_ADAPTER_TARGET]: `This plugin adapter cannot be added to an Asset`,
    [MPL_CORE_ERROR__INVALID_PLUGIN_OPERATION]: `Invalid plugin operation`,
    [MPL_CORE_ERROR__INVALID_PLUGIN_SETTING]: `Invalid setting for plugin`,
    [MPL_CORE_ERROR__INVALID_SYSTEM_PROGRAM]: `Invalid System Program`,
    [MPL_CORE_ERROR__MISSING_ASSET]: `Missing asset needed for extra account PDA derivation`,
    [MPL_CORE_ERROR__MISSING_COLLECTION]: `Missing collection`,
    [MPL_CORE_ERROR__MISSING_COMPRESSION_PROOF]: `Missing compression proof`,
    [MPL_CORE_ERROR__MISSING_EXTERNAL_PLUGIN_ADAPTER_ACCOUNT]: `Missing account needed for external plugin adapter`,
    [MPL_CORE_ERROR__MISSING_NEW_OWNER]: `Missing new owner`,
    [MPL_CORE_ERROR__MISSING_SIGNER]: `Missing required signer for operation`,
    [MPL_CORE_ERROR__MISSING_SYSTEM_PROGRAM]: `Missing system program`,
    [MPL_CORE_ERROR__MISSING_UPDATE_AUTHORITY]: `Missing update authority`,
    [MPL_CORE_ERROR__NO_APPROVALS]: `Neither the asset or any plugins have approved this operation`,
    [MPL_CORE_ERROR__NO_DATA_SOURCES]: `No data sources provided, one is required`,
    [MPL_CORE_ERROR__NOT_AVAILABLE]: `Feature not available`,
    [MPL_CORE_ERROR__NUMERICAL_OVERFLOW]: `Numerical Overflow`,
    [MPL_CORE_ERROR__NUMERICAL_OVERFLOW_ERROR]: `Numerical overflow`,
    [MPL_CORE_ERROR__ORACLE_CAN_REJECT_ONLY]: `Oracle external plugin adapter can only be configured to reject`,
    [MPL_CORE_ERROR__PERMANENT_DELEGATES_PREVENT_MOVE]: `Cannot move asset to collection with permanent delegates`,
    [MPL_CORE_ERROR__PLUGIN_ALREADY_EXISTS]: `Plugin already exists`,
    [MPL_CORE_ERROR__PLUGIN_NOT_FOUND]: `Plugin not found`,
    [MPL_CORE_ERROR__PLUGINS_NOT_INITIALIZED]: `Plugins not initialized`,
    [MPL_CORE_ERROR__REQUIRES_LIFECYCLE_CHECK]: `External plugin adapter must have at least one lifecycle check`,
    [MPL_CORE_ERROR__SERIALIZATION_ERROR]: `Error serializing account`,
    [MPL_CORE_ERROR__TWO_DATA_SOURCES]: `Two data sources provided, only one is allowed`,
    [MPL_CORE_ERROR__UNINITIALIZED_ORACLE_ACCOUNT]: `Oracle account is uninitialized`,
    [MPL_CORE_ERROR__UNSUPPORTED_OPERATION]: `External Plugin does not support this operation`,
  };
}

export function getMplCoreErrorMessage(code: MplCoreError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (mplCoreErrorMessages as Record<MplCoreError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isMplCoreError<TProgramErrorCode extends MplCoreError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    MPL_CORE_PROGRAM_ADDRESS,
    code
  );
}
