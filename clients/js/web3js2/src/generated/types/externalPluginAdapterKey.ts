/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';
import {
  getLinkedDataKeyDecoder,
  getLinkedDataKeyEncoder,
  getPluginAuthorityDecoder,
  getPluginAuthorityEncoder,
  type LinkedDataKey,
  type LinkedDataKeyArgs,
  type PluginAuthority,
  type PluginAuthorityArgs,
} from '.';

export type ExternalPluginAdapterKey =
  | { __kind: 'LifecycleHook'; fields: readonly [Address] }
  | { __kind: 'Oracle'; fields: readonly [Address] }
  | { __kind: 'AppData'; fields: readonly [PluginAuthority] }
  | { __kind: 'LinkedLifecycleHook'; fields: readonly [Address] }
  | { __kind: 'LinkedAppData'; fields: readonly [PluginAuthority] }
  | { __kind: 'DataSection'; fields: readonly [LinkedDataKey] };

export type ExternalPluginAdapterKeyArgs =
  | { __kind: 'LifecycleHook'; fields: readonly [Address] }
  | { __kind: 'Oracle'; fields: readonly [Address] }
  | { __kind: 'AppData'; fields: readonly [PluginAuthorityArgs] }
  | { __kind: 'LinkedLifecycleHook'; fields: readonly [Address] }
  | { __kind: 'LinkedAppData'; fields: readonly [PluginAuthorityArgs] }
  | { __kind: 'DataSection'; fields: readonly [LinkedDataKeyArgs] };

export function getExternalPluginAdapterKeyEncoder(): Encoder<ExternalPluginAdapterKeyArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'LifecycleHook',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
    [
      'Oracle',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
    [
      'AppData',
      getStructEncoder([
        ['fields', getTupleEncoder([getPluginAuthorityEncoder()])],
      ]),
    ],
    [
      'LinkedLifecycleHook',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
    [
      'LinkedAppData',
      getStructEncoder([
        ['fields', getTupleEncoder([getPluginAuthorityEncoder()])],
      ]),
    ],
    [
      'DataSection',
      getStructEncoder([
        ['fields', getTupleEncoder([getLinkedDataKeyEncoder()])],
      ]),
    ],
  ]);
}

export function getExternalPluginAdapterKeyDecoder(): Decoder<ExternalPluginAdapterKey> {
  return getDiscriminatedUnionDecoder([
    [
      'LifecycleHook',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
    [
      'Oracle',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
    [
      'AppData',
      getStructDecoder([
        ['fields', getTupleDecoder([getPluginAuthorityDecoder()])],
      ]),
    ],
    [
      'LinkedLifecycleHook',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
    [
      'LinkedAppData',
      getStructDecoder([
        ['fields', getTupleDecoder([getPluginAuthorityDecoder()])],
      ]),
    ],
    [
      'DataSection',
      getStructDecoder([
        ['fields', getTupleDecoder([getLinkedDataKeyDecoder()])],
      ]),
    ],
  ]);
}

export function getExternalPluginAdapterKeyCodec(): Codec<
  ExternalPluginAdapterKeyArgs,
  ExternalPluginAdapterKey
> {
  return combineCodec(
    getExternalPluginAdapterKeyEncoder(),
    getExternalPluginAdapterKeyDecoder()
  );
}

// Data Enum Helpers.
export function externalPluginAdapterKey(
  kind: 'LifecycleHook',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterKeyArgs,
    '__kind',
    'LifecycleHook'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterKeyArgs,
  '__kind',
  'LifecycleHook'
>;
export function externalPluginAdapterKey(
  kind: 'Oracle',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterKeyArgs,
    '__kind',
    'Oracle'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterKeyArgs,
  '__kind',
  'Oracle'
>;
export function externalPluginAdapterKey(
  kind: 'AppData',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterKeyArgs,
    '__kind',
    'AppData'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterKeyArgs,
  '__kind',
  'AppData'
>;
export function externalPluginAdapterKey(
  kind: 'LinkedLifecycleHook',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterKeyArgs,
    '__kind',
    'LinkedLifecycleHook'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterKeyArgs,
  '__kind',
  'LinkedLifecycleHook'
>;
export function externalPluginAdapterKey(
  kind: 'LinkedAppData',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterKeyArgs,
    '__kind',
    'LinkedAppData'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterKeyArgs,
  '__kind',
  'LinkedAppData'
>;
export function externalPluginAdapterKey(
  kind: 'DataSection',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterKeyArgs,
    '__kind',
    'DataSection'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterKeyArgs,
  '__kind',
  'DataSection'
>;
export function externalPluginAdapterKey<
  K extends ExternalPluginAdapterKeyArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isExternalPluginAdapterKey<
  K extends ExternalPluginAdapterKey['__kind'],
>(
  kind: K,
  value: ExternalPluginAdapterKey
): value is ExternalPluginAdapterKey & { __kind: K } {
  return value.__kind === kind;
}
