/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';
import {
  getAppDataDecoder,
  getAppDataEncoder,
  getDataSectionDecoder,
  getDataSectionEncoder,
  getLifecycleHookDecoder,
  getLifecycleHookEncoder,
  getLinkedAppDataDecoder,
  getLinkedAppDataEncoder,
  getLinkedLifecycleHookDecoder,
  getLinkedLifecycleHookEncoder,
  getOracleDecoder,
  getOracleEncoder,
  type AppData,
  type AppDataArgs,
  type DataSection,
  type DataSectionArgs,
  type LifecycleHook,
  type LifecycleHookArgs,
  type LinkedAppData,
  type LinkedAppDataArgs,
  type LinkedLifecycleHook,
  type LinkedLifecycleHookArgs,
  type Oracle,
  type OracleArgs,
} from '.';

export type ExternalPluginAdapter =
  | { __kind: 'LifecycleHook'; fields: readonly [LifecycleHook] }
  | { __kind: 'Oracle'; fields: readonly [Oracle] }
  | { __kind: 'AppData'; fields: readonly [AppData] }
  | { __kind: 'LinkedLifecycleHook'; fields: readonly [LinkedLifecycleHook] }
  | { __kind: 'LinkedAppData'; fields: readonly [LinkedAppData] }
  | { __kind: 'DataSection'; fields: readonly [DataSection] };

export type ExternalPluginAdapterArgs =
  | { __kind: 'LifecycleHook'; fields: readonly [LifecycleHookArgs] }
  | { __kind: 'Oracle'; fields: readonly [OracleArgs] }
  | { __kind: 'AppData'; fields: readonly [AppDataArgs] }
  | {
      __kind: 'LinkedLifecycleHook';
      fields: readonly [LinkedLifecycleHookArgs];
    }
  | { __kind: 'LinkedAppData'; fields: readonly [LinkedAppDataArgs] }
  | { __kind: 'DataSection'; fields: readonly [DataSectionArgs] };

export function getExternalPluginAdapterEncoder(): Encoder<ExternalPluginAdapterArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'LifecycleHook',
      getStructEncoder([
        ['fields', getTupleEncoder([getLifecycleHookEncoder()])],
      ]),
    ],
    [
      'Oracle',
      getStructEncoder([['fields', getTupleEncoder([getOracleEncoder()])]]),
    ],
    [
      'AppData',
      getStructEncoder([['fields', getTupleEncoder([getAppDataEncoder()])]]),
    ],
    [
      'LinkedLifecycleHook',
      getStructEncoder([
        ['fields', getTupleEncoder([getLinkedLifecycleHookEncoder()])],
      ]),
    ],
    [
      'LinkedAppData',
      getStructEncoder([
        ['fields', getTupleEncoder([getLinkedAppDataEncoder()])],
      ]),
    ],
    [
      'DataSection',
      getStructEncoder([
        ['fields', getTupleEncoder([getDataSectionEncoder()])],
      ]),
    ],
  ]);
}

export function getExternalPluginAdapterDecoder(): Decoder<ExternalPluginAdapter> {
  return getDiscriminatedUnionDecoder([
    [
      'LifecycleHook',
      getStructDecoder([
        ['fields', getTupleDecoder([getLifecycleHookDecoder()])],
      ]),
    ],
    [
      'Oracle',
      getStructDecoder([['fields', getTupleDecoder([getOracleDecoder()])]]),
    ],
    [
      'AppData',
      getStructDecoder([['fields', getTupleDecoder([getAppDataDecoder()])]]),
    ],
    [
      'LinkedLifecycleHook',
      getStructDecoder([
        ['fields', getTupleDecoder([getLinkedLifecycleHookDecoder()])],
      ]),
    ],
    [
      'LinkedAppData',
      getStructDecoder([
        ['fields', getTupleDecoder([getLinkedAppDataDecoder()])],
      ]),
    ],
    [
      'DataSection',
      getStructDecoder([
        ['fields', getTupleDecoder([getDataSectionDecoder()])],
      ]),
    ],
  ]);
}

export function getExternalPluginAdapterCodec(): Codec<
  ExternalPluginAdapterArgs,
  ExternalPluginAdapter
> {
  return combineCodec(
    getExternalPluginAdapterEncoder(),
    getExternalPluginAdapterDecoder()
  );
}

// Data Enum Helpers.
export function externalPluginAdapter(
  kind: 'LifecycleHook',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterArgs,
    '__kind',
    'LifecycleHook'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterArgs,
  '__kind',
  'LifecycleHook'
>;
export function externalPluginAdapter(
  kind: 'Oracle',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterArgs,
    '__kind',
    'Oracle'
  >['fields']
): GetDiscriminatedUnionVariant<ExternalPluginAdapterArgs, '__kind', 'Oracle'>;
export function externalPluginAdapter(
  kind: 'AppData',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterArgs,
    '__kind',
    'AppData'
  >['fields']
): GetDiscriminatedUnionVariant<ExternalPluginAdapterArgs, '__kind', 'AppData'>;
export function externalPluginAdapter(
  kind: 'LinkedLifecycleHook',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterArgs,
    '__kind',
    'LinkedLifecycleHook'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterArgs,
  '__kind',
  'LinkedLifecycleHook'
>;
export function externalPluginAdapter(
  kind: 'LinkedAppData',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterArgs,
    '__kind',
    'LinkedAppData'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterArgs,
  '__kind',
  'LinkedAppData'
>;
export function externalPluginAdapter(
  kind: 'DataSection',
  data: GetDiscriminatedUnionVariantContent<
    ExternalPluginAdapterArgs,
    '__kind',
    'DataSection'
  >['fields']
): GetDiscriminatedUnionVariant<
  ExternalPluginAdapterArgs,
  '__kind',
  'DataSection'
>;
export function externalPluginAdapter<
  K extends ExternalPluginAdapterArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isExternalPluginAdapter<
  K extends ExternalPluginAdapter['__kind'],
>(
  kind: K,
  value: ExternalPluginAdapter
): value is ExternalPluginAdapter & { __kind: K } {
  return value.__kind === kind;
}
