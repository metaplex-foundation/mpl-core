/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getExternalCheckResultDecoder,
  getExternalCheckResultEncoder,
  getExternalPluginAdapterSchemaDecoder,
  getExternalPluginAdapterSchemaEncoder,
  getExtraAccountDecoder,
  getExtraAccountEncoder,
  getHookableLifecycleEventDecoder,
  getHookableLifecycleEventEncoder,
  getPluginAuthorityDecoder,
  getPluginAuthorityEncoder,
  type ExternalCheckResult,
  type ExternalCheckResultArgs,
  type ExternalPluginAdapterSchema,
  type ExternalPluginAdapterSchemaArgs,
  type ExtraAccount,
  type ExtraAccountArgs,
  type HookableLifecycleEvent,
  type HookableLifecycleEventArgs,
  type PluginAuthority,
  type PluginAuthorityArgs,
} from '.';

export type LinkedLifecycleHookInitInfo = {
  hookedProgram: Address;
  initPluginAuthority: Option<PluginAuthority>;
  lifecycleChecks: Array<
    readonly [HookableLifecycleEvent, ExternalCheckResult]
  >;
  extraAccounts: Option<Array<ExtraAccount>>;
  dataAuthority: Option<PluginAuthority>;
  schema: Option<ExternalPluginAdapterSchema>;
};

export type LinkedLifecycleHookInitInfoArgs = {
  hookedProgram: Address;
  initPluginAuthority: OptionOrNullable<PluginAuthorityArgs>;
  lifecycleChecks: Array<
    readonly [HookableLifecycleEventArgs, ExternalCheckResultArgs]
  >;
  extraAccounts: OptionOrNullable<Array<ExtraAccountArgs>>;
  dataAuthority: OptionOrNullable<PluginAuthorityArgs>;
  schema: OptionOrNullable<ExternalPluginAdapterSchemaArgs>;
};

export function getLinkedLifecycleHookInitInfoEncoder(): Encoder<LinkedLifecycleHookInitInfoArgs> {
  return getStructEncoder([
    ['hookedProgram', getAddressEncoder()],
    ['initPluginAuthority', getOptionEncoder(getPluginAuthorityEncoder())],
    [
      'lifecycleChecks',
      getArrayEncoder(
        getTupleEncoder([
          getHookableLifecycleEventEncoder(),
          getExternalCheckResultEncoder(),
        ])
      ),
    ],
    [
      'extraAccounts',
      getOptionEncoder(getArrayEncoder(getExtraAccountEncoder())),
    ],
    ['dataAuthority', getOptionEncoder(getPluginAuthorityEncoder())],
    ['schema', getOptionEncoder(getExternalPluginAdapterSchemaEncoder())],
  ]);
}

export function getLinkedLifecycleHookInitInfoDecoder(): Decoder<LinkedLifecycleHookInitInfo> {
  return getStructDecoder([
    ['hookedProgram', getAddressDecoder()],
    ['initPluginAuthority', getOptionDecoder(getPluginAuthorityDecoder())],
    [
      'lifecycleChecks',
      getArrayDecoder(
        getTupleDecoder([
          getHookableLifecycleEventDecoder(),
          getExternalCheckResultDecoder(),
        ])
      ),
    ],
    [
      'extraAccounts',
      getOptionDecoder(getArrayDecoder(getExtraAccountDecoder())),
    ],
    ['dataAuthority', getOptionDecoder(getPluginAuthorityDecoder())],
    ['schema', getOptionDecoder(getExternalPluginAdapterSchemaDecoder())],
  ]);
}

export function getLinkedLifecycleHookInitInfoCodec(): Codec<
  LinkedLifecycleHookInitInfoArgs,
  LinkedLifecycleHookInitInfo
> {
  return combineCodec(
    getLinkedLifecycleHookInitInfoEncoder(),
    getLinkedLifecycleHookInitInfoDecoder()
  );
}
