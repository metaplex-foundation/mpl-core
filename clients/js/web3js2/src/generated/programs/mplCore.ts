/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddCollectionExternalPluginAdapterV1Instruction,
  type ParsedAddCollectionPluginV1Instruction,
  type ParsedAddExternalPluginAdapterV1Instruction,
  type ParsedAddPluginV1Instruction,
  type ParsedApproveCollectionPluginAuthorityV1Instruction,
  type ParsedApprovePluginAuthorityV1Instruction,
  type ParsedBurnCollectionV1Instruction,
  type ParsedBurnV1Instruction,
  type ParsedCollectInstruction,
  type ParsedCompressV1Instruction,
  type ParsedCreateCollectionV1Instruction,
  type ParsedCreateCollectionV2Instruction,
  type ParsedCreateV1Instruction,
  type ParsedCreateV2Instruction,
  type ParsedDecompressV1Instruction,
  type ParsedRemoveCollectionExternalPluginAdapterV1Instruction,
  type ParsedRemoveCollectionPluginV1Instruction,
  type ParsedRemoveExternalPluginAdapterV1Instruction,
  type ParsedRemovePluginV1Instruction,
  type ParsedRevokeCollectionPluginAuthorityV1Instruction,
  type ParsedRevokePluginAuthorityV1Instruction,
  type ParsedTransferV1Instruction,
  type ParsedUpdateCollectionExternalPluginAdapterV1Instruction,
  type ParsedUpdateCollectionPluginV1Instruction,
  type ParsedUpdateCollectionV1Instruction,
  type ParsedUpdateExternalPluginAdapterV1Instruction,
  type ParsedUpdatePluginV1Instruction,
  type ParsedUpdateV1Instruction,
  type ParsedUpdateV2Instruction,
  type ParsedWriteCollectionExternalPluginAdapterDataV1Instruction,
  type ParsedWriteExternalPluginAdapterDataV1Instruction,
} from '../instructions';

export const MPL_CORE_PROGRAM_ADDRESS =
  'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;

export enum MplCoreAccount {
  PluginHeaderV1,
  PluginRegistryV1,
  BaseAssetV1,
  BaseCollectionV1,
  HashedAssetV1,
}

export enum MplCoreInstruction {
  CreateV1,
  CreateCollectionV1,
  AddPluginV1,
  AddCollectionPluginV1,
  RemovePluginV1,
  RemoveCollectionPluginV1,
  UpdatePluginV1,
  UpdateCollectionPluginV1,
  ApprovePluginAuthorityV1,
  ApproveCollectionPluginAuthorityV1,
  RevokePluginAuthorityV1,
  RevokeCollectionPluginAuthorityV1,
  BurnV1,
  BurnCollectionV1,
  TransferV1,
  UpdateV1,
  UpdateCollectionV1,
  CompressV1,
  DecompressV1,
  Collect,
  CreateV2,
  CreateCollectionV2,
  AddExternalPluginAdapterV1,
  AddCollectionExternalPluginAdapterV1,
  RemoveExternalPluginAdapterV1,
  RemoveCollectionExternalPluginAdapterV1,
  UpdateExternalPluginAdapterV1,
  UpdateCollectionExternalPluginAdapterV1,
  WriteExternalPluginAdapterDataV1,
  WriteCollectionExternalPluginAdapterDataV1,
  UpdateV2,
}

export function identifyMplCoreInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MplCoreInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return MplCoreInstruction.CreateV1;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return MplCoreInstruction.CreateCollectionV1;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return MplCoreInstruction.AddPluginV1;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return MplCoreInstruction.AddCollectionPluginV1;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return MplCoreInstruction.RemovePluginV1;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return MplCoreInstruction.RemoveCollectionPluginV1;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return MplCoreInstruction.UpdatePluginV1;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return MplCoreInstruction.UpdateCollectionPluginV1;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return MplCoreInstruction.ApprovePluginAuthorityV1;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return MplCoreInstruction.ApproveCollectionPluginAuthorityV1;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return MplCoreInstruction.RevokePluginAuthorityV1;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return MplCoreInstruction.RevokeCollectionPluginAuthorityV1;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return MplCoreInstruction.BurnV1;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return MplCoreInstruction.BurnCollectionV1;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return MplCoreInstruction.TransferV1;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return MplCoreInstruction.UpdateV1;
  }
  if (containsBytes(data, getU8Encoder().encode(16), 0)) {
    return MplCoreInstruction.UpdateCollectionV1;
  }
  if (containsBytes(data, getU8Encoder().encode(17), 0)) {
    return MplCoreInstruction.CompressV1;
  }
  if (containsBytes(data, getU8Encoder().encode(18), 0)) {
    return MplCoreInstruction.DecompressV1;
  }
  if (containsBytes(data, getU8Encoder().encode(19), 0)) {
    return MplCoreInstruction.Collect;
  }
  if (containsBytes(data, getU8Encoder().encode(20), 0)) {
    return MplCoreInstruction.CreateV2;
  }
  if (containsBytes(data, getU8Encoder().encode(21), 0)) {
    return MplCoreInstruction.CreateCollectionV2;
  }
  if (containsBytes(data, getU8Encoder().encode(22), 0)) {
    return MplCoreInstruction.AddExternalPluginAdapterV1;
  }
  if (containsBytes(data, getU8Encoder().encode(23), 0)) {
    return MplCoreInstruction.AddCollectionExternalPluginAdapterV1;
  }
  if (containsBytes(data, getU8Encoder().encode(24), 0)) {
    return MplCoreInstruction.RemoveExternalPluginAdapterV1;
  }
  if (containsBytes(data, getU8Encoder().encode(25), 0)) {
    return MplCoreInstruction.RemoveCollectionExternalPluginAdapterV1;
  }
  if (containsBytes(data, getU8Encoder().encode(26), 0)) {
    return MplCoreInstruction.UpdateExternalPluginAdapterV1;
  }
  if (containsBytes(data, getU8Encoder().encode(27), 0)) {
    return MplCoreInstruction.UpdateCollectionExternalPluginAdapterV1;
  }
  if (containsBytes(data, getU8Encoder().encode(28), 0)) {
    return MplCoreInstruction.WriteExternalPluginAdapterDataV1;
  }
  if (containsBytes(data, getU8Encoder().encode(29), 0)) {
    return MplCoreInstruction.WriteCollectionExternalPluginAdapterDataV1;
  }
  if (containsBytes(data, getU8Encoder().encode(30), 0)) {
    return MplCoreInstruction.UpdateV2;
  }
  throw new Error(
    'The provided instruction could not be identified as a mplCore instruction.'
  );
}

export type ParsedMplCoreInstruction<
  TProgram extends string = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
> =
  | ({
      instructionType: MplCoreInstruction.CreateV1;
    } & ParsedCreateV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.CreateCollectionV1;
    } & ParsedCreateCollectionV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.AddPluginV1;
    } & ParsedAddPluginV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.AddCollectionPluginV1;
    } & ParsedAddCollectionPluginV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.RemovePluginV1;
    } & ParsedRemovePluginV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.RemoveCollectionPluginV1;
    } & ParsedRemoveCollectionPluginV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.UpdatePluginV1;
    } & ParsedUpdatePluginV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.UpdateCollectionPluginV1;
    } & ParsedUpdateCollectionPluginV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.ApprovePluginAuthorityV1;
    } & ParsedApprovePluginAuthorityV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.ApproveCollectionPluginAuthorityV1;
    } & ParsedApproveCollectionPluginAuthorityV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.RevokePluginAuthorityV1;
    } & ParsedRevokePluginAuthorityV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.RevokeCollectionPluginAuthorityV1;
    } & ParsedRevokeCollectionPluginAuthorityV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.BurnV1;
    } & ParsedBurnV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.BurnCollectionV1;
    } & ParsedBurnCollectionV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.TransferV1;
    } & ParsedTransferV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.UpdateV1;
    } & ParsedUpdateV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.UpdateCollectionV1;
    } & ParsedUpdateCollectionV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.CompressV1;
    } & ParsedCompressV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.DecompressV1;
    } & ParsedDecompressV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.Collect;
    } & ParsedCollectInstruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.CreateV2;
    } & ParsedCreateV2Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.CreateCollectionV2;
    } & ParsedCreateCollectionV2Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.AddExternalPluginAdapterV1;
    } & ParsedAddExternalPluginAdapterV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.AddCollectionExternalPluginAdapterV1;
    } & ParsedAddCollectionExternalPluginAdapterV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.RemoveExternalPluginAdapterV1;
    } & ParsedRemoveExternalPluginAdapterV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.RemoveCollectionExternalPluginAdapterV1;
    } & ParsedRemoveCollectionExternalPluginAdapterV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.UpdateExternalPluginAdapterV1;
    } & ParsedUpdateExternalPluginAdapterV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.UpdateCollectionExternalPluginAdapterV1;
    } & ParsedUpdateCollectionExternalPluginAdapterV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.WriteExternalPluginAdapterDataV1;
    } & ParsedWriteExternalPluginAdapterDataV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.WriteCollectionExternalPluginAdapterDataV1;
    } & ParsedWriteCollectionExternalPluginAdapterDataV1Instruction<TProgram>)
  | ({
      instructionType: MplCoreInstruction.UpdateV2;
    } & ParsedUpdateV2Instruction<TProgram>);
