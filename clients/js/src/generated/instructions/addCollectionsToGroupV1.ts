/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type AddCollectionsToGroupV1InstructionAccounts = {
  /** The address of the group to modify */
  group: PublicKey | Pda;
  /** The account paying for storage fees */
  payer?: Signer;
  /** The update authority or delegate of the group/collections */
  authority?: Signer;
  /** The system program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type AddCollectionsToGroupV1InstructionData = { discriminator: number };

export type AddCollectionsToGroupV1InstructionDataArgs = {};

export function getAddCollectionsToGroupV1InstructionDataSerializer(): Serializer<
  AddCollectionsToGroupV1InstructionDataArgs,
  AddCollectionsToGroupV1InstructionData
> {
  return mapSerializer<
    AddCollectionsToGroupV1InstructionDataArgs,
    any,
    AddCollectionsToGroupV1InstructionData
  >(
    struct<AddCollectionsToGroupV1InstructionData>([['discriminator', u8()]], {
      description: 'AddCollectionsToGroupV1InstructionData',
    }),
    (value) => ({ ...value, discriminator: 33 })
  ) as Serializer<
    AddCollectionsToGroupV1InstructionDataArgs,
    AddCollectionsToGroupV1InstructionData
  >;
}

// Instruction.
export function addCollectionsToGroupV1(
  context: Pick<Context, 'payer' | 'programs'>,
  input: AddCollectionsToGroupV1InstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );

  // Accounts.
  const resolvedAccounts = {
    group: {
      index: 0,
      isWritable: true as boolean,
      value: input.group ?? null,
    },
    payer: {
      index: 1,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    authority: {
      index: 2,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
    systemProgram: {
      index: 3,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getAddCollectionsToGroupV1InstructionDataSerializer().serialize(
    {}
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
