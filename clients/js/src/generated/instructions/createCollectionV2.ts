/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  option,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  ExternalPluginInitInfo,
  ExternalPluginInitInfoArgs,
  PluginAuthorityPair,
  PluginAuthorityPairArgs,
  getExternalPluginInitInfoSerializer,
  getPluginAuthorityPairSerializer,
} from '../types';

// Accounts.
export type CreateCollectionV2InstructionAccounts = {
  /** The address of the new asset */
  collection: Signer;
  /** The authority of the new asset */
  updateAuthority?: PublicKey | Pda;
  /** The account paying for the storage fees */
  payer?: Signer;
  /** The system program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateCollectionV2InstructionData = {
  discriminator: number;
  name: string;
  uri: string;
  plugins: Option<Array<PluginAuthorityPair>>;
  externalPlugins: Option<Array<ExternalPluginInitInfo>>;
};

export type CreateCollectionV2InstructionDataArgs = {
  name: string;
  uri: string;
  plugins: OptionOrNullable<Array<PluginAuthorityPairArgs>>;
  externalPlugins: OptionOrNullable<Array<ExternalPluginInitInfoArgs>>;
};

export function getCreateCollectionV2InstructionDataSerializer(): Serializer<
  CreateCollectionV2InstructionDataArgs,
  CreateCollectionV2InstructionData
> {
  return mapSerializer<
    CreateCollectionV2InstructionDataArgs,
    any,
    CreateCollectionV2InstructionData
  >(
    struct<CreateCollectionV2InstructionData>(
      [
        ['discriminator', u8()],
        ['name', string()],
        ['uri', string()],
        ['plugins', option(array(getPluginAuthorityPairSerializer()))],
        [
          'externalPlugins',
          option(array(getExternalPluginInitInfoSerializer())),
        ],
      ],
      { description: 'CreateCollectionV2InstructionData' }
    ),
    (value) => ({ ...value, discriminator: 21 })
  ) as Serializer<
    CreateCollectionV2InstructionDataArgs,
    CreateCollectionV2InstructionData
  >;
}

// Args.
export type CreateCollectionV2InstructionArgs =
  CreateCollectionV2InstructionDataArgs;

// Instruction.
export function createCollectionV2(
  context: Pick<Context, 'payer' | 'programs'>,
  input: CreateCollectionV2InstructionAccounts &
    CreateCollectionV2InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );

  // Accounts.
  const resolvedAccounts = {
    collection: {
      index: 0,
      isWritable: true as boolean,
      value: input.collection ?? null,
    },
    updateAuthority: {
      index: 1,
      isWritable: false as boolean,
      value: input.updateAuthority ?? null,
    },
    payer: {
      index: 2,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    systemProgram: {
      index: 3,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateCollectionV2InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCreateCollectionV2InstructionDataSerializer().serialize(
    resolvedArgs as CreateCollectionV2InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
