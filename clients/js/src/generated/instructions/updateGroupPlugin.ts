/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type UpdateGroupPluginInstructionAccounts = {
  /** The plugin authority as defined by plugin config */
  authority?: Signer;
  /** The group account */
  group: PublicKey | Pda;
  /** The plugin account to update */
  plugin: PublicKey | Pda;
};

// Data.
export type UpdateGroupPluginInstructionData = {
  discriminator: number;
  pluginArgs: Uint8Array;
};

export type UpdateGroupPluginInstructionDataArgs = { pluginArgs: Uint8Array };

export function getUpdateGroupPluginInstructionDataSerializer(): Serializer<
  UpdateGroupPluginInstructionDataArgs,
  UpdateGroupPluginInstructionData
> {
  return mapSerializer<
    UpdateGroupPluginInstructionDataArgs,
    any,
    UpdateGroupPluginInstructionData
  >(
    struct<UpdateGroupPluginInstructionData>(
      [
        ['discriminator', u8()],
        ['pluginArgs', bytes({ size: u32() })],
      ],
      { description: 'UpdateGroupPluginInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 43 })
  ) as Serializer<
    UpdateGroupPluginInstructionDataArgs,
    UpdateGroupPluginInstructionData
  >;
}

// Args.
export type UpdateGroupPluginInstructionArgs =
  UpdateGroupPluginInstructionDataArgs;

// Instruction.
export function updateGroupPlugin(
  context: Pick<Context, 'identity' | 'programs'>,
  input: UpdateGroupPluginInstructionAccounts & UpdateGroupPluginInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );

  // Accounts.
  const resolvedAccounts = {
    authority: {
      index: 0,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
    group: {
      index: 1,
      isWritable: false as boolean,
      value: input.group ?? null,
    },
    plugin: {
      index: 2,
      isWritable: true as boolean,
      value: input.plugin ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateGroupPluginInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateGroupPluginInstructionDataSerializer().serialize(
    resolvedArgs as UpdateGroupPluginInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
