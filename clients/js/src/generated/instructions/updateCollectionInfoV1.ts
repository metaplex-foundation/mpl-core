/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import { UpdateType, UpdateTypeArgs, getUpdateTypeSerializer } from '../types';

// Accounts.
export type UpdateCollectionInfoV1InstructionAccounts = {
  /** The address of the asset */
  collection: PublicKey | Pda;
  /** Bubblegum PDA signer */
  bubblegumSigner: Signer;
};

// Data.
export type UpdateCollectionInfoV1InstructionData = {
  discriminator: number;
  updateType: UpdateType;
  amount: number;
};

export type UpdateCollectionInfoV1InstructionDataArgs = {
  updateType: UpdateTypeArgs;
  amount: number;
};

export function getUpdateCollectionInfoV1InstructionDataSerializer(): Serializer<
  UpdateCollectionInfoV1InstructionDataArgs,
  UpdateCollectionInfoV1InstructionData
> {
  return mapSerializer<
    UpdateCollectionInfoV1InstructionDataArgs,
    any,
    UpdateCollectionInfoV1InstructionData
  >(
    struct<UpdateCollectionInfoV1InstructionData>(
      [
        ['discriminator', u8()],
        ['updateType', getUpdateTypeSerializer()],
        ['amount', u32()],
      ],
      { description: 'UpdateCollectionInfoV1InstructionData' }
    ),
    (value) => ({ ...value, discriminator: 32 })
  ) as Serializer<
    UpdateCollectionInfoV1InstructionDataArgs,
    UpdateCollectionInfoV1InstructionData
  >;
}

// Args.
export type UpdateCollectionInfoV1InstructionArgs =
  UpdateCollectionInfoV1InstructionDataArgs;

// Instruction.
export function updateCollectionInfoV1(
  context: Pick<Context, 'programs'>,
  input: UpdateCollectionInfoV1InstructionAccounts &
    UpdateCollectionInfoV1InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );

  // Accounts.
  const resolvedAccounts = {
    collection: {
      index: 0,
      isWritable: true as boolean,
      value: input.collection ?? null,
    },
    bubblegumSigner: {
      index: 1,
      isWritable: false as boolean,
      value: input.bubblegumSigner ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateCollectionInfoV1InstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateCollectionInfoV1InstructionDataSerializer().serialize(
    resolvedArgs as UpdateCollectionInfoV1InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
