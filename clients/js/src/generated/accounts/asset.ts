/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  Key,
  KeyArgs,
  UpdateAuthority,
  UpdateAuthorityArgs,
  getKeySerializer,
  getUpdateAuthoritySerializer,
} from '../types';

export type Asset = Account<AssetAccountData>;

export type AssetAccountData = {
  key: Key;
  owner: PublicKey;
  updateAuthority: UpdateAuthority;
  name: string;
  uri: string;
  seq: Option<bigint>;
};

export type AssetAccountDataArgs = {
  owner: PublicKey;
  updateAuthority: UpdateAuthorityArgs;
  name: string;
  uri: string;
  seq: OptionOrNullable<number | bigint>;
};

export function getAssetAccountDataSerializer(): Serializer<
  AssetAccountDataArgs,
  AssetAccountData
> {
  return mapSerializer<AssetAccountDataArgs, any, AssetAccountData>(
    struct<AssetAccountData>(
      [
        ['key', getKeySerializer()],
        ['owner', publicKeySerializer()],
        ['updateAuthority', getUpdateAuthoritySerializer()],
        ['name', string()],
        ['uri', string()],
        ['seq', option(u64())],
      ],
      { description: 'AssetAccountData' }
    ),
    (value) => ({ ...value, key: Key.Asset })
  ) as Serializer<AssetAccountDataArgs, AssetAccountData>;
}

export function deserializeAsset(rawAccount: RpcAccount): Asset {
  return deserializeAccount(rawAccount, getAssetAccountDataSerializer());
}

export async function fetchAsset(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Asset> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Asset');
  return deserializeAsset(maybeAccount);
}

export async function safeFetchAsset(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Asset | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeAsset(maybeAccount) : null;
}

export async function fetchAllAsset(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Asset[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Asset');
    return deserializeAsset(maybeAccount);
  });
}

export async function safeFetchAllAsset(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Asset[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeAsset(maybeAccount as RpcAccount));
}

export function getAssetGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREzp6dAdLVRKf3EM5tWrsXM2jQwRFeu5uhzsAyjYXL'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      owner: PublicKey;
      updateAuthority: UpdateAuthorityArgs;
      name: string;
      uri: string;
      seq: OptionOrNullable<number | bigint>;
    }>({
      key: [0, getKeySerializer()],
      owner: [1, publicKeySerializer()],
      updateAuthority: [33, getUpdateAuthoritySerializer()],
      name: [null, string()],
      uri: [null, string()],
      seq: [null, option(u64())],
    })
    .deserializeUsing<Asset>((account) => deserializeAsset(account))
    .whereField('key', Key.Asset);
}
