/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  publicKey as publicKeySerializer,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type GroupV1 = Account<GroupV1AccountData>;

export type GroupV1AccountData = {
  key: Key;
  updateAuthority: PublicKey;
  name: string;
  uri: string;
  collections: Array<PublicKey>;
  groups: Array<PublicKey>;
  parentGroups: Array<PublicKey>;
  assets: Array<PublicKey>;
};

export type GroupV1AccountDataArgs = {
  key: KeyArgs;
  updateAuthority: PublicKey;
  name: string;
  uri: string;
  collections: Array<PublicKey>;
  groups: Array<PublicKey>;
  parentGroups: Array<PublicKey>;
  assets: Array<PublicKey>;
};

export function getGroupV1AccountDataSerializer(): Serializer<
  GroupV1AccountDataArgs,
  GroupV1AccountData
> {
  return struct<GroupV1AccountData>(
    [
      ['key', getKeySerializer()],
      ['updateAuthority', publicKeySerializer()],
      ['name', string()],
      ['uri', string()],
      ['collections', array(publicKeySerializer())],
      ['groups', array(publicKeySerializer())],
      ['parentGroups', array(publicKeySerializer())],
      ['assets', array(publicKeySerializer())],
    ],
    { description: 'GroupV1AccountData' }
  ) as Serializer<GroupV1AccountDataArgs, GroupV1AccountData>;
}

export function deserializeGroupV1(rawAccount: RpcAccount): GroupV1 {
  return deserializeAccount(rawAccount, getGroupV1AccountDataSerializer());
}

export async function fetchGroupV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GroupV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'GroupV1');
  return deserializeGroupV1(maybeAccount);
}

export async function safeFetchGroupV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GroupV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeGroupV1(maybeAccount) : null;
}

export async function fetchAllGroupV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GroupV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'GroupV1');
    return deserializeGroupV1(maybeAccount);
  });
}

export async function safeFetchAllGroupV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GroupV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeGroupV1(maybeAccount as RpcAccount));
}

export function getGroupV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      updateAuthority: PublicKey;
      name: string;
      uri: string;
      collections: Array<PublicKey>;
      groups: Array<PublicKey>;
      parentGroups: Array<PublicKey>;
      assets: Array<PublicKey>;
    }>({
      key: [0, getKeySerializer()],
      updateAuthority: [1, publicKeySerializer()],
      name: [33, string()],
      uri: [null, string()],
      collections: [null, array(publicKeySerializer())],
      groups: [null, array(publicKeySerializer())],
      parentGroups: [null, array(publicKeySerializer())],
      assets: [null, array(publicKeySerializer())],
    })
    .deserializeUsing<GroupV1>((account) => deserializeGroupV1(account));
}
