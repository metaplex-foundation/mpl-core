/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type AssetGroupPluginV1 = Account<AssetGroupPluginV1AccountData>;

export type AssetGroupPluginV1AccountData = {
  key: Key;
  asset: PublicKey;
  groups: Array<PublicKey>;
};

export type AssetGroupPluginV1AccountDataArgs = {
  key: KeyArgs;
  asset: PublicKey;
  groups: Array<PublicKey>;
};

export function getAssetGroupPluginV1AccountDataSerializer(): Serializer<
  AssetGroupPluginV1AccountDataArgs,
  AssetGroupPluginV1AccountData
> {
  return struct<AssetGroupPluginV1AccountData>(
    [
      ['key', getKeySerializer()],
      ['asset', publicKeySerializer()],
      ['groups', array(publicKeySerializer())],
    ],
    { description: 'AssetGroupPluginV1AccountData' }
  ) as Serializer<
    AssetGroupPluginV1AccountDataArgs,
    AssetGroupPluginV1AccountData
  >;
}

export function deserializeAssetGroupPluginV1(
  rawAccount: RpcAccount
): AssetGroupPluginV1 {
  return deserializeAccount(
    rawAccount,
    getAssetGroupPluginV1AccountDataSerializer()
  );
}

export async function fetchAssetGroupPluginV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AssetGroupPluginV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'AssetGroupPluginV1');
  return deserializeAssetGroupPluginV1(maybeAccount);
}

export async function safeFetchAssetGroupPluginV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AssetGroupPluginV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeAssetGroupPluginV1(maybeAccount)
    : null;
}

export async function fetchAllAssetGroupPluginV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AssetGroupPluginV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'AssetGroupPluginV1');
    return deserializeAssetGroupPluginV1(maybeAccount);
  });
}

export async function safeFetchAllAssetGroupPluginV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AssetGroupPluginV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeAssetGroupPluginV1(maybeAccount as RpcAccount)
    );
}

export function getAssetGroupPluginV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      asset: PublicKey;
      groups: Array<PublicKey>;
    }>({
      key: [0, getKeySerializer()],
      asset: [1, publicKeySerializer()],
      groups: [33, array(publicKeySerializer())],
    })
    .deserializeUsing<AssetGroupPluginV1>((account) =>
      deserializeAssetGroupPluginV1(account)
    );
}
