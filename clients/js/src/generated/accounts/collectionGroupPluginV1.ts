/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type CollectionGroupPluginV1 =
  Account<CollectionGroupPluginV1AccountData>;

export type CollectionGroupPluginV1AccountData = {
  key: Key;
  collection: PublicKey;
  groups: Array<PublicKey>;
};

export type CollectionGroupPluginV1AccountDataArgs = {
  key: KeyArgs;
  collection: PublicKey;
  groups: Array<PublicKey>;
};

export function getCollectionGroupPluginV1AccountDataSerializer(): Serializer<
  CollectionGroupPluginV1AccountDataArgs,
  CollectionGroupPluginV1AccountData
> {
  return struct<CollectionGroupPluginV1AccountData>(
    [
      ['key', getKeySerializer()],
      ['collection', publicKeySerializer()],
      ['groups', array(publicKeySerializer())],
    ],
    { description: 'CollectionGroupPluginV1AccountData' }
  ) as Serializer<
    CollectionGroupPluginV1AccountDataArgs,
    CollectionGroupPluginV1AccountData
  >;
}

export function deserializeCollectionGroupPluginV1(
  rawAccount: RpcAccount
): CollectionGroupPluginV1 {
  return deserializeAccount(
    rawAccount,
    getCollectionGroupPluginV1AccountDataSerializer()
  );
}

export async function fetchCollectionGroupPluginV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<CollectionGroupPluginV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'CollectionGroupPluginV1');
  return deserializeCollectionGroupPluginV1(maybeAccount);
}

export async function safeFetchCollectionGroupPluginV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<CollectionGroupPluginV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeCollectionGroupPluginV1(maybeAccount)
    : null;
}

export async function fetchAllCollectionGroupPluginV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<CollectionGroupPluginV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'CollectionGroupPluginV1');
    return deserializeCollectionGroupPluginV1(maybeAccount);
  });
}

export async function safeFetchAllCollectionGroupPluginV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<CollectionGroupPluginV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeCollectionGroupPluginV1(maybeAccount as RpcAccount)
    );
}

export function getCollectionGroupPluginV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      collection: PublicKey;
      groups: Array<PublicKey>;
    }>({
      key: [0, getKeySerializer()],
      collection: [1, publicKeySerializer()],
      groups: [33, array(publicKeySerializer())],
    })
    .deserializeUsing<CollectionGroupPluginV1>((account) =>
      deserializeCollectionGroupPluginV1(account)
    );
}
