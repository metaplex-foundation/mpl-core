/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import { array } from '@metaplex-foundation/umi/serializers';
import {
  PluginRegistryV1AccountData,
  getPluginRegistryV1AccountDataSerializer,
} from '../../hooked';
import {
  ExternalRegistryRecordArgs,
  KeyArgs,
  RegistryRecordArgs,
  getExternalRegistryRecordSerializer,
  getKeySerializer,
  getRegistryRecordSerializer,
} from '../types';

export type PluginRegistryV1 = Account<PluginRegistryV1AccountData>;

export function deserializePluginRegistryV1(
  rawAccount: RpcAccount
): PluginRegistryV1 {
  return deserializeAccount(
    rawAccount,
    getPluginRegistryV1AccountDataSerializer()
  );
}

export async function fetchPluginRegistryV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PluginRegistryV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'PluginRegistryV1');
  return deserializePluginRegistryV1(maybeAccount);
}

export async function safeFetchPluginRegistryV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PluginRegistryV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePluginRegistryV1(maybeAccount) : null;
}

export async function fetchAllPluginRegistryV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PluginRegistryV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PluginRegistryV1');
    return deserializePluginRegistryV1(maybeAccount);
  });
}

export async function safeFetchAllPluginRegistryV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PluginRegistryV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializePluginRegistryV1(maybeAccount as RpcAccount)
    );
}

export function getPluginRegistryV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCore',
    'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      registry: Array<RegistryRecordArgs>;
      externalRegistry: Array<ExternalRegistryRecordArgs>;
    }>({
      key: [0, getKeySerializer()],
      registry: [1, array(getRegistryRecordSerializer())],
      externalRegistry: [null, array(getExternalRegistryRecordSerializer())],
    })
    .deserializeUsing<PluginRegistryV1>((account) =>
      deserializePluginRegistryV1(account)
    );
}
