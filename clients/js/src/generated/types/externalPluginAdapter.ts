/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  BaseAssetLinkedSecureDataStore,
  BaseAssetLinkedSecureDataStoreArgs,
  BaseDataSection,
  BaseDataSectionArgs,
  BaseLifecycleHook,
  BaseLifecycleHookArgs,
  BaseOracle,
  BaseOracleArgs,
  BaseSecureDataStore,
  BaseSecureDataStoreArgs,
  getBaseAssetLinkedSecureDataStoreSerializer,
  getBaseDataSectionSerializer,
  getBaseLifecycleHookSerializer,
  getBaseOracleSerializer,
  getBaseSecureDataStoreSerializer,
} from '.';

export type ExternalPluginAdapter =
  | { __kind: 'LifecycleHook'; fields: [BaseLifecycleHook] }
  | { __kind: 'Oracle'; fields: [BaseOracle] }
  | { __kind: 'SecureDataStore'; fields: [BaseSecureDataStore] }
  | {
      __kind: 'AssetLinkedSecureDataStore';
      fields: [BaseAssetLinkedSecureDataStore];
    }
  | { __kind: 'DataSection'; fields: [BaseDataSection] };

export type ExternalPluginAdapterArgs =
  | { __kind: 'LifecycleHook'; fields: [BaseLifecycleHookArgs] }
  | { __kind: 'Oracle'; fields: [BaseOracleArgs] }
  | { __kind: 'SecureDataStore'; fields: [BaseSecureDataStoreArgs] }
  | {
      __kind: 'AssetLinkedSecureDataStore';
      fields: [BaseAssetLinkedSecureDataStoreArgs];
    }
  | { __kind: 'DataSection'; fields: [BaseDataSectionArgs] };

export function getExternalPluginAdapterSerializer(): Serializer<
  ExternalPluginAdapterArgs,
  ExternalPluginAdapter
> {
  return dataEnum<ExternalPluginAdapter>(
    [
      [
        'LifecycleHook',
        struct<GetDataEnumKindContent<ExternalPluginAdapter, 'LifecycleHook'>>([
          ['fields', tuple([getBaseLifecycleHookSerializer()])],
        ]),
      ],
      [
        'Oracle',
        struct<GetDataEnumKindContent<ExternalPluginAdapter, 'Oracle'>>([
          ['fields', tuple([getBaseOracleSerializer()])],
        ]),
      ],
      [
        'SecureDataStore',
        struct<
          GetDataEnumKindContent<ExternalPluginAdapter, 'SecureDataStore'>
        >([['fields', tuple([getBaseSecureDataStoreSerializer()])]]),
      ],
      [
        'AssetLinkedSecureDataStore',
        struct<
          GetDataEnumKindContent<
            ExternalPluginAdapter,
            'AssetLinkedSecureDataStore'
          >
        >([['fields', tuple([getBaseAssetLinkedSecureDataStoreSerializer()])]]),
      ],
      [
        'DataSection',
        struct<GetDataEnumKindContent<ExternalPluginAdapter, 'DataSection'>>([
          ['fields', tuple([getBaseDataSectionSerializer()])],
        ]),
      ],
    ],
    { description: 'ExternalPluginAdapter' }
  ) as Serializer<ExternalPluginAdapterArgs, ExternalPluginAdapter>;
}

// Data Enum Helpers.
export function externalPluginAdapter(
  kind: 'LifecycleHook',
  data: GetDataEnumKindContent<
    ExternalPluginAdapterArgs,
    'LifecycleHook'
  >['fields']
): GetDataEnumKind<ExternalPluginAdapterArgs, 'LifecycleHook'>;
export function externalPluginAdapter(
  kind: 'Oracle',
  data: GetDataEnumKindContent<ExternalPluginAdapterArgs, 'Oracle'>['fields']
): GetDataEnumKind<ExternalPluginAdapterArgs, 'Oracle'>;
export function externalPluginAdapter(
  kind: 'SecureDataStore',
  data: GetDataEnumKindContent<
    ExternalPluginAdapterArgs,
    'SecureDataStore'
  >['fields']
): GetDataEnumKind<ExternalPluginAdapterArgs, 'SecureDataStore'>;
export function externalPluginAdapter(
  kind: 'AssetLinkedSecureDataStore',
  data: GetDataEnumKindContent<
    ExternalPluginAdapterArgs,
    'AssetLinkedSecureDataStore'
  >['fields']
): GetDataEnumKind<ExternalPluginAdapterArgs, 'AssetLinkedSecureDataStore'>;
export function externalPluginAdapter(
  kind: 'DataSection',
  data: GetDataEnumKindContent<
    ExternalPluginAdapterArgs,
    'DataSection'
  >['fields']
): GetDataEnumKind<ExternalPluginAdapterArgs, 'DataSection'>;
export function externalPluginAdapter<
  K extends ExternalPluginAdapterArgs['__kind'],
>(kind: K, data?: any): Extract<ExternalPluginAdapterArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isExternalPluginAdapter<
  K extends ExternalPluginAdapter['__kind'],
>(
  kind: K,
  value: ExternalPluginAdapter
): value is ExternalPluginAdapter & { __kind: K } {
  return value.__kind === kind;
}
