/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  BaseDataStoreUpdateInfo,
  BaseDataStoreUpdateInfoArgs,
  BaseLifecycleHookUpdateInfo,
  BaseLifecycleHookUpdateInfoArgs,
  BaseOracleUpdateInfo,
  BaseOracleUpdateInfoArgs,
  getBaseDataStoreUpdateInfoSerializer,
  getBaseLifecycleHookUpdateInfoSerializer,
  getBaseOracleUpdateInfoSerializer,
} from '.';

export type BaseExternalPluginUpdateInfo =
  | { __kind: 'LifecycleHook'; fields: [BaseLifecycleHookUpdateInfo] }
  | { __kind: 'Oracle'; fields: [BaseOracleUpdateInfo] }
  | { __kind: 'DataStore'; fields: [BaseDataStoreUpdateInfo] };

export type BaseExternalPluginUpdateInfoArgs =
  | { __kind: 'LifecycleHook'; fields: [BaseLifecycleHookUpdateInfoArgs] }
  | { __kind: 'Oracle'; fields: [BaseOracleUpdateInfoArgs] }
  | { __kind: 'DataStore'; fields: [BaseDataStoreUpdateInfoArgs] };

export function getBaseExternalPluginUpdateInfoSerializer(): Serializer<
  BaseExternalPluginUpdateInfoArgs,
  BaseExternalPluginUpdateInfo
> {
  return dataEnum<BaseExternalPluginUpdateInfo>(
    [
      [
        'LifecycleHook',
        struct<
          GetDataEnumKindContent<BaseExternalPluginUpdateInfo, 'LifecycleHook'>
        >([['fields', tuple([getBaseLifecycleHookUpdateInfoSerializer()])]]),
      ],
      [
        'Oracle',
        struct<GetDataEnumKindContent<BaseExternalPluginUpdateInfo, 'Oracle'>>([
          ['fields', tuple([getBaseOracleUpdateInfoSerializer()])],
        ]),
      ],
      [
        'DataStore',
        struct<
          GetDataEnumKindContent<BaseExternalPluginUpdateInfo, 'DataStore'>
        >([['fields', tuple([getBaseDataStoreUpdateInfoSerializer()])]]),
      ],
    ],
    { description: 'BaseExternalPluginUpdateInfo' }
  ) as Serializer<
    BaseExternalPluginUpdateInfoArgs,
    BaseExternalPluginUpdateInfo
  >;
}

// Data Enum Helpers.
export function baseExternalPluginUpdateInfo(
  kind: 'LifecycleHook',
  data: GetDataEnumKindContent<
    BaseExternalPluginUpdateInfoArgs,
    'LifecycleHook'
  >['fields']
): GetDataEnumKind<BaseExternalPluginUpdateInfoArgs, 'LifecycleHook'>;
export function baseExternalPluginUpdateInfo(
  kind: 'Oracle',
  data: GetDataEnumKindContent<
    BaseExternalPluginUpdateInfoArgs,
    'Oracle'
  >['fields']
): GetDataEnumKind<BaseExternalPluginUpdateInfoArgs, 'Oracle'>;
export function baseExternalPluginUpdateInfo(
  kind: 'DataStore',
  data: GetDataEnumKindContent<
    BaseExternalPluginUpdateInfoArgs,
    'DataStore'
  >['fields']
): GetDataEnumKind<BaseExternalPluginUpdateInfoArgs, 'DataStore'>;
export function baseExternalPluginUpdateInfo<
  K extends BaseExternalPluginUpdateInfoArgs['__kind']
>(
  kind: K,
  data?: any
): Extract<BaseExternalPluginUpdateInfoArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isBaseExternalPluginUpdateInfo<
  K extends BaseExternalPluginUpdateInfo['__kind']
>(
  kind: K,
  value: BaseExternalPluginUpdateInfo
): value is BaseExternalPluginUpdateInfo & { __kind: K } {
  return value.__kind === kind;
}
