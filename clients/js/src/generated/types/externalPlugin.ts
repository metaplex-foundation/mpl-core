/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  DataStore,
  DataStoreArgs,
  LifecycleHook,
  LifecycleHookArgs,
  Oracle,
  OracleArgs,
  getDataStoreSerializer,
  getLifecycleHookSerializer,
  getOracleSerializer,
} from '.';

export type ExternalPlugin =
  | { __kind: 'LifecycleHook'; fields: [LifecycleHook] }
  | { __kind: 'Oracle'; fields: [Oracle] }
  | { __kind: 'DataStore'; fields: [DataStore] };

export type ExternalPluginArgs =
  | { __kind: 'LifecycleHook'; fields: [LifecycleHookArgs] }
  | { __kind: 'Oracle'; fields: [OracleArgs] }
  | { __kind: 'DataStore'; fields: [DataStoreArgs] };

export function getExternalPluginSerializer(): Serializer<
  ExternalPluginArgs,
  ExternalPlugin
> {
  return dataEnum<ExternalPlugin>(
    [
      [
        'LifecycleHook',
        struct<GetDataEnumKindContent<ExternalPlugin, 'LifecycleHook'>>([
          ['fields', tuple([getLifecycleHookSerializer()])],
        ]),
      ],
      [
        'Oracle',
        struct<GetDataEnumKindContent<ExternalPlugin, 'Oracle'>>([
          ['fields', tuple([getOracleSerializer()])],
        ]),
      ],
      [
        'DataStore',
        struct<GetDataEnumKindContent<ExternalPlugin, 'DataStore'>>([
          ['fields', tuple([getDataStoreSerializer()])],
        ]),
      ],
    ],
    { description: 'ExternalPlugin' }
  ) as Serializer<ExternalPluginArgs, ExternalPlugin>;
}

// Data Enum Helpers.
export function externalPlugin(
  kind: 'LifecycleHook',
  data: GetDataEnumKindContent<ExternalPluginArgs, 'LifecycleHook'>['fields']
): GetDataEnumKind<ExternalPluginArgs, 'LifecycleHook'>;
export function externalPlugin(
  kind: 'Oracle',
  data: GetDataEnumKindContent<ExternalPluginArgs, 'Oracle'>['fields']
): GetDataEnumKind<ExternalPluginArgs, 'Oracle'>;
export function externalPlugin(
  kind: 'DataStore',
  data: GetDataEnumKindContent<ExternalPluginArgs, 'DataStore'>['fields']
): GetDataEnumKind<ExternalPluginArgs, 'DataStore'>;
export function externalPlugin<K extends ExternalPluginArgs['__kind']>(
  kind: K,
  data?: any
): Extract<ExternalPluginArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isExternalPlugin<K extends ExternalPlugin['__kind']>(
  kind: K,
  value: ExternalPlugin
): value is ExternalPlugin & { __kind: K } {
  return value.__kind === kind;
}
