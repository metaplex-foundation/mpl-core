/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  PluginAuthority,
  PluginAuthorityArgs,
  getPluginAuthoritySerializer,
} from '.';

export type ExternalPluginKey =
  | { __kind: 'LifecycleHook'; fields: [PublicKey] }
  | { __kind: 'Oracle'; fields: [PublicKey] }
  | { __kind: 'DataStore'; fields: [PluginAuthority] };

export type ExternalPluginKeyArgs =
  | { __kind: 'LifecycleHook'; fields: [PublicKey] }
  | { __kind: 'Oracle'; fields: [PublicKey] }
  | { __kind: 'DataStore'; fields: [PluginAuthorityArgs] };

export function getExternalPluginKeySerializer(): Serializer<
  ExternalPluginKeyArgs,
  ExternalPluginKey
> {
  return dataEnum<ExternalPluginKey>(
    [
      [
        'LifecycleHook',
        struct<GetDataEnumKindContent<ExternalPluginKey, 'LifecycleHook'>>([
          ['fields', tuple([publicKeySerializer()])],
        ]),
      ],
      [
        'Oracle',
        struct<GetDataEnumKindContent<ExternalPluginKey, 'Oracle'>>([
          ['fields', tuple([publicKeySerializer()])],
        ]),
      ],
      [
        'DataStore',
        struct<GetDataEnumKindContent<ExternalPluginKey, 'DataStore'>>([
          ['fields', tuple([getPluginAuthoritySerializer()])],
        ]),
      ],
    ],
    { description: 'ExternalPluginKey' }
  ) as Serializer<ExternalPluginKeyArgs, ExternalPluginKey>;
}

// Data Enum Helpers.
export function externalPluginKey(
  kind: 'LifecycleHook',
  data: GetDataEnumKindContent<ExternalPluginKeyArgs, 'LifecycleHook'>['fields']
): GetDataEnumKind<ExternalPluginKeyArgs, 'LifecycleHook'>;
export function externalPluginKey(
  kind: 'Oracle',
  data: GetDataEnumKindContent<ExternalPluginKeyArgs, 'Oracle'>['fields']
): GetDataEnumKind<ExternalPluginKeyArgs, 'Oracle'>;
export function externalPluginKey(
  kind: 'DataStore',
  data: GetDataEnumKindContent<ExternalPluginKeyArgs, 'DataStore'>['fields']
): GetDataEnumKind<ExternalPluginKeyArgs, 'DataStore'>;
export function externalPluginKey<K extends ExternalPluginKeyArgs['__kind']>(
  kind: K,
  data?: any
): Extract<ExternalPluginKeyArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isExternalPluginKey<K extends ExternalPluginKey['__kind']>(
  kind: K,
  value: ExternalPluginKey
): value is ExternalPluginKey & { __kind: K } {
  return value.__kind === kind;
}
