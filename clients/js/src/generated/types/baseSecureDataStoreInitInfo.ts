/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import {
  Serializer,
  option,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  BasePluginAuthority,
  BasePluginAuthorityArgs,
  ExternalPluginAdapterSchema,
  ExternalPluginAdapterSchemaArgs,
  getBasePluginAuthoritySerializer,
  getExternalPluginAdapterSchemaSerializer,
} from '.';

export type BaseSecureDataStoreInitInfo = {
  dataAuthority: BasePluginAuthority;
  initPluginAuthority: Option<BasePluginAuthority>;
  schema: Option<ExternalPluginAdapterSchema>;
};

export type BaseSecureDataStoreInitInfoArgs = {
  dataAuthority: BasePluginAuthorityArgs;
  initPluginAuthority: OptionOrNullable<BasePluginAuthorityArgs>;
  schema: OptionOrNullable<ExternalPluginAdapterSchemaArgs>;
};

export function getBaseSecureDataStoreInitInfoSerializer(): Serializer<
  BaseSecureDataStoreInitInfoArgs,
  BaseSecureDataStoreInitInfo
> {
  return struct<BaseSecureDataStoreInitInfo>(
    [
      ['dataAuthority', getBasePluginAuthoritySerializer()],
      ['initPluginAuthority', option(getBasePluginAuthoritySerializer())],
      ['schema', option(getExternalPluginAdapterSchemaSerializer())],
    ],
    { description: 'BaseSecureDataStoreInitInfo' }
  ) as Serializer<BaseSecureDataStoreInitInfoArgs, BaseSecureDataStoreInitInfo>;
}
