/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  BaseDataStoreInitInfo,
  BaseDataStoreInitInfoArgs,
  BaseLifecycleHookInitInfo,
  BaseLifecycleHookInitInfoArgs,
  BaseOracleInitInfo,
  BaseOracleInitInfoArgs,
  getBaseDataStoreInitInfoSerializer,
  getBaseLifecycleHookInitInfoSerializer,
  getBaseOracleInitInfoSerializer,
} from '.';

export type BasePluginAdapterInitInfo =
  | { __kind: 'LifecycleHook'; fields: [BaseLifecycleHookInitInfo] }
  | { __kind: 'Oracle'; fields: [BaseOracleInitInfo] }
  | { __kind: 'DataStore'; fields: [BaseDataStoreInitInfo] };

export type BasePluginAdapterInitInfoArgs =
  | { __kind: 'LifecycleHook'; fields: [BaseLifecycleHookInitInfoArgs] }
  | { __kind: 'Oracle'; fields: [BaseOracleInitInfoArgs] }
  | { __kind: 'DataStore'; fields: [BaseDataStoreInitInfoArgs] };

export function getBasePluginAdapterInitInfoSerializer(): Serializer<
  BasePluginAdapterInitInfoArgs,
  BasePluginAdapterInitInfo
> {
  return dataEnum<BasePluginAdapterInitInfo>(
    [
      [
        'LifecycleHook',
        struct<
          GetDataEnumKindContent<BasePluginAdapterInitInfo, 'LifecycleHook'>
        >([['fields', tuple([getBaseLifecycleHookInitInfoSerializer()])]]),
      ],
      [
        'Oracle',
        struct<GetDataEnumKindContent<BasePluginAdapterInitInfo, 'Oracle'>>([
          ['fields', tuple([getBaseOracleInitInfoSerializer()])],
        ]),
      ],
      [
        'DataStore',
        struct<GetDataEnumKindContent<BasePluginAdapterInitInfo, 'DataStore'>>([
          ['fields', tuple([getBaseDataStoreInitInfoSerializer()])],
        ]),
      ],
    ],
    { description: 'BasePluginAdapterInitInfo' }
  ) as Serializer<BasePluginAdapterInitInfoArgs, BasePluginAdapterInitInfo>;
}

// Data Enum Helpers.
export function basePluginAdapterInitInfo(
  kind: 'LifecycleHook',
  data: GetDataEnumKindContent<
    BasePluginAdapterInitInfoArgs,
    'LifecycleHook'
  >['fields']
): GetDataEnumKind<BasePluginAdapterInitInfoArgs, 'LifecycleHook'>;
export function basePluginAdapterInitInfo(
  kind: 'Oracle',
  data: GetDataEnumKindContent<
    BasePluginAdapterInitInfoArgs,
    'Oracle'
  >['fields']
): GetDataEnumKind<BasePluginAdapterInitInfoArgs, 'Oracle'>;
export function basePluginAdapterInitInfo(
  kind: 'DataStore',
  data: GetDataEnumKindContent<
    BasePluginAdapterInitInfoArgs,
    'DataStore'
  >['fields']
): GetDataEnumKind<BasePluginAdapterInitInfoArgs, 'DataStore'>;
export function basePluginAdapterInitInfo<
  K extends BasePluginAdapterInitInfoArgs['__kind'],
>(kind: K, data?: any): Extract<BasePluginAdapterInitInfoArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isBasePluginAdapterInitInfo<
  K extends BasePluginAdapterInitInfo['__kind'],
>(
  kind: K,
  value: BasePluginAdapterInitInfo
): value is BasePluginAdapterInitInfo & { __kind: K } {
  return value.__kind === kind;
}
