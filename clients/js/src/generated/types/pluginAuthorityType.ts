/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  tuple,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type PluginAuthorityType =
  | { __kind: 'None' }
  | { __kind: 'UpdateAuthority' }
  | { __kind: 'SpecificAddress'; fields: [PublicKey] };

export type PluginAuthorityTypeArgs = PluginAuthorityType;

export function getPluginAuthorityTypeSerializer(): Serializer<
  PluginAuthorityTypeArgs,
  PluginAuthorityType
> {
  return dataEnum<PluginAuthorityType>(
    [
      ['None', unit()],
      ['UpdateAuthority', unit()],
      [
        'SpecificAddress',
        struct<GetDataEnumKindContent<PluginAuthorityType, 'SpecificAddress'>>([
          ['fields', tuple([publicKeySerializer()])],
        ]),
      ],
    ],
    { description: 'PluginAuthorityType' }
  ) as Serializer<PluginAuthorityTypeArgs, PluginAuthorityType>;
}

// Data Enum Helpers.
export function pluginAuthorityType(
  kind: 'None'
): GetDataEnumKind<PluginAuthorityTypeArgs, 'None'>;
export function pluginAuthorityType(
  kind: 'UpdateAuthority'
): GetDataEnumKind<PluginAuthorityTypeArgs, 'UpdateAuthority'>;
export function pluginAuthorityType(
  kind: 'SpecificAddress',
  data: GetDataEnumKindContent<
    PluginAuthorityTypeArgs,
    'SpecificAddress'
  >['fields']
): GetDataEnumKind<PluginAuthorityTypeArgs, 'SpecificAddress'>;
export function pluginAuthorityType<
  K extends PluginAuthorityTypeArgs['__kind'],
>(kind: K, data?: any): Extract<PluginAuthorityTypeArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isPluginAuthorityType<K extends PluginAuthorityType['__kind']>(
  kind: K,
  value: PluginAuthorityType
): value is PluginAuthorityType & { __kind: K } {
  return value.__kind === kind;
}
