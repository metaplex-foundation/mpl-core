/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  option,
  struct,
  tuple,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  BasePluginAuthority,
  BasePluginAuthorityArgs,
  ExternalPluginAdapterCheckResult,
  ExternalPluginAdapterCheckResultArgs,
  ExternalPluginAdapterType,
  ExternalPluginAdapterTypeArgs,
  HookableLifecycleEvent,
  HookableLifecycleEventArgs,
  getBasePluginAuthoritySerializer,
  getExternalPluginAdapterCheckResultSerializer,
  getExternalPluginAdapterTypeSerializer,
  getHookableLifecycleEventSerializer,
} from '.';

export type ExternalPluginAdapterRegistryRecord = {
  pluginType: ExternalPluginAdapterType;
  authority: BasePluginAuthority;
  lifecycleChecks: Option<
    Array<[HookableLifecycleEvent, ExternalPluginAdapterCheckResult]>
  >;
  offset: bigint;
  dataOffset: Option<bigint>;
  dataLen: Option<bigint>;
};

export type ExternalPluginAdapterRegistryRecordArgs = {
  pluginType: ExternalPluginAdapterTypeArgs;
  authority: BasePluginAuthorityArgs;
  lifecycleChecks: OptionOrNullable<
    Array<[HookableLifecycleEventArgs, ExternalPluginAdapterCheckResultArgs]>
  >;
  offset: number | bigint;
  dataOffset: OptionOrNullable<number | bigint>;
  dataLen: OptionOrNullable<number | bigint>;
};

export function getExternalPluginAdapterRegistryRecordSerializer(): Serializer<
  ExternalPluginAdapterRegistryRecordArgs,
  ExternalPluginAdapterRegistryRecord
> {
  return struct<ExternalPluginAdapterRegistryRecord>(
    [
      ['pluginType', getExternalPluginAdapterTypeSerializer()],
      ['authority', getBasePluginAuthoritySerializer()],
      [
        'lifecycleChecks',
        option(
          array(
            tuple([
              getHookableLifecycleEventSerializer(),
              getExternalPluginAdapterCheckResultSerializer(),
            ])
          )
        ),
      ],
      ['offset', u64()],
      ['dataOffset', option(u64())],
      ['dataLen', option(u64())],
    ],
    { description: 'ExternalPluginAdapterRegistryRecord' }
  ) as Serializer<
    ExternalPluginAdapterRegistryRecordArgs,
    ExternalPluginAdapterRegistryRecord
  >;
}
