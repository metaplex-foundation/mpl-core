/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import {
  Serializer,
  option,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ExternalPluginSchema,
  ExternalPluginSchemaArgs,
  PluginAuthority,
  PluginAuthorityArgs,
  getExternalPluginSchemaSerializer,
  getPluginAuthoritySerializer,
} from '.';

export type DataStoreInitInfo = {
  dataAuthority: PluginAuthority;
  initPluginAuthority: Option<PluginAuthority>;
  schema: Option<ExternalPluginSchema>;
};

export type DataStoreInitInfoArgs = {
  dataAuthority: PluginAuthorityArgs;
  initPluginAuthority: OptionOrNullable<PluginAuthorityArgs>;
  schema: OptionOrNullable<ExternalPluginSchemaArgs>;
};

export function getDataStoreInitInfoSerializer(): Serializer<
  DataStoreInitInfoArgs,
  DataStoreInitInfo
> {
  return struct<DataStoreInitInfo>(
    [
      ['dataAuthority', getPluginAuthoritySerializer()],
      ['initPluginAuthority', option(getPluginAuthoritySerializer())],
      ['schema', option(getExternalPluginSchemaSerializer())],
    ],
    { description: 'DataStoreInitInfo' }
  ) as Serializer<DataStoreInitInfoArgs, DataStoreInitInfo>;
}
