/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type BasePluginAuthority =
  | { __kind: 'None' }
  | { __kind: 'Owner' }
  | { __kind: 'UpdateAuthority' }
  | { __kind: 'Address'; address: PublicKey };

export type BasePluginAuthorityArgs = BasePluginAuthority;

export function getBasePluginAuthoritySerializer(): Serializer<
  BasePluginAuthorityArgs,
  BasePluginAuthority
> {
  return dataEnum<BasePluginAuthority>(
    [
      ['None', unit()],
      ['Owner', unit()],
      ['UpdateAuthority', unit()],
      [
        'Address',
        struct<GetDataEnumKindContent<BasePluginAuthority, 'Address'>>([
          ['address', publicKeySerializer()],
        ]),
      ],
    ],
    { description: 'BasePluginAuthority' }
  ) as Serializer<BasePluginAuthorityArgs, BasePluginAuthority>;
}

// Data Enum Helpers.
export function basePluginAuthority(
  kind: 'None'
): GetDataEnumKind<BasePluginAuthorityArgs, 'None'>;
export function basePluginAuthority(
  kind: 'Owner'
): GetDataEnumKind<BasePluginAuthorityArgs, 'Owner'>;
export function basePluginAuthority(
  kind: 'UpdateAuthority'
): GetDataEnumKind<BasePluginAuthorityArgs, 'UpdateAuthority'>;
export function basePluginAuthority(
  kind: 'Address',
  data: GetDataEnumKindContent<BasePluginAuthorityArgs, 'Address'>
): GetDataEnumKind<BasePluginAuthorityArgs, 'Address'>;
export function basePluginAuthority<
  K extends BasePluginAuthorityArgs['__kind'],
>(kind: K, data?: any): Extract<BasePluginAuthorityArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isBasePluginAuthority<K extends BasePluginAuthority['__kind']>(
  kind: K,
  value: BasePluginAuthority
): value is BasePluginAuthority & { __kind: K } {
  return value.__kind === kind;
}
