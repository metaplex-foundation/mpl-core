/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  bytes,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  tuple,
  u32,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type BaseSeed =
  | { __kind: 'Collection' }
  | { __kind: 'Owner' }
  | { __kind: 'Recipient' }
  | { __kind: 'Asset' }
  | { __kind: 'Address'; fields: [PublicKey] }
  | { __kind: 'Bytes'; fields: [Uint8Array] };

export type BaseSeedArgs = BaseSeed;

export function getBaseSeedSerializer(): Serializer<BaseSeedArgs, BaseSeed> {
  return dataEnum<BaseSeed>(
    [
      ['Collection', unit()],
      ['Owner', unit()],
      ['Recipient', unit()],
      ['Asset', unit()],
      [
        'Address',
        struct<GetDataEnumKindContent<BaseSeed, 'Address'>>([
          ['fields', tuple([publicKeySerializer()])],
        ]),
      ],
      [
        'Bytes',
        struct<GetDataEnumKindContent<BaseSeed, 'Bytes'>>([
          ['fields', tuple([bytes({ size: u32() })])],
        ]),
      ],
    ],
    { description: 'BaseSeed' }
  ) as Serializer<BaseSeedArgs, BaseSeed>;
}

// Data Enum Helpers.
export function baseSeed(
  kind: 'Collection'
): GetDataEnumKind<BaseSeedArgs, 'Collection'>;
export function baseSeed(kind: 'Owner'): GetDataEnumKind<BaseSeedArgs, 'Owner'>;
export function baseSeed(
  kind: 'Recipient'
): GetDataEnumKind<BaseSeedArgs, 'Recipient'>;
export function baseSeed(kind: 'Asset'): GetDataEnumKind<BaseSeedArgs, 'Asset'>;
export function baseSeed(
  kind: 'Address',
  data: GetDataEnumKindContent<BaseSeedArgs, 'Address'>['fields']
): GetDataEnumKind<BaseSeedArgs, 'Address'>;
export function baseSeed(
  kind: 'Bytes',
  data: GetDataEnumKindContent<BaseSeedArgs, 'Bytes'>['fields']
): GetDataEnumKind<BaseSeedArgs, 'Bytes'>;
export function baseSeed<K extends BaseSeedArgs['__kind']>(
  kind: K,
  data?: any
): Extract<BaseSeedArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isBaseSeed<K extends BaseSeed['__kind']>(
  kind: K,
  value: BaseSeed
): value is BaseSeed & { __kind: K } {
  return value.__kind === kind;
}
