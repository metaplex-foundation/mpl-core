/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  bytes,
  dataEnum,
  struct,
  tuple,
  u32,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type Seed =
  | { __kind: 'Program' }
  | { __kind: 'Collection' }
  | { __kind: 'Owner' }
  | { __kind: 'Recipient' }
  | { __kind: 'Asset' }
  | { __kind: 'Bytes'; fields: [Uint8Array] };

export type SeedArgs = Seed;

export function getSeedSerializer(): Serializer<SeedArgs, Seed> {
  return dataEnum<Seed>(
    [
      ['Program', unit()],
      ['Collection', unit()],
      ['Owner', unit()],
      ['Recipient', unit()],
      ['Asset', unit()],
      [
        'Bytes',
        struct<GetDataEnumKindContent<Seed, 'Bytes'>>([
          ['fields', tuple([bytes({ size: u32() })])],
        ]),
      ],
    ],
    { description: 'Seed' }
  ) as Serializer<SeedArgs, Seed>;
}

// Data Enum Helpers.
export function seed(kind: 'Program'): GetDataEnumKind<SeedArgs, 'Program'>;
export function seed(
  kind: 'Collection'
): GetDataEnumKind<SeedArgs, 'Collection'>;
export function seed(kind: 'Owner'): GetDataEnumKind<SeedArgs, 'Owner'>;
export function seed(kind: 'Recipient'): GetDataEnumKind<SeedArgs, 'Recipient'>;
export function seed(kind: 'Asset'): GetDataEnumKind<SeedArgs, 'Asset'>;
export function seed(
  kind: 'Bytes',
  data: GetDataEnumKindContent<SeedArgs, 'Bytes'>['fields']
): GetDataEnumKind<SeedArgs, 'Bytes'>;
export function seed<K extends SeedArgs['__kind']>(
  kind: K,
  data?: any
): Extract<SeedArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isSeed<K extends Seed['__kind']>(
  kind: K,
  value: Seed
): value is Seed & { __kind: K } {
  return value.__kind === kind;
}
