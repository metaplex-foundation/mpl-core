/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  DataStoreInitInfo,
  DataStoreInitInfoArgs,
  LifecycleHookInitInfo,
  LifecycleHookInitInfoArgs,
  OracleInitInfo,
  OracleInitInfoArgs,
  getDataStoreInitInfoSerializer,
  getLifecycleHookInitInfoSerializer,
  getOracleInitInfoSerializer,
} from '.';

export type ExternalPluginInitInfo =
  | { __kind: 'LifecycleHook'; fields: [LifecycleHookInitInfo] }
  | { __kind: 'Oracle'; fields: [OracleInitInfo] }
  | { __kind: 'DataStore'; fields: [DataStoreInitInfo] };

export type ExternalPluginInitInfoArgs =
  | { __kind: 'LifecycleHook'; fields: [LifecycleHookInitInfoArgs] }
  | { __kind: 'Oracle'; fields: [OracleInitInfoArgs] }
  | { __kind: 'DataStore'; fields: [DataStoreInitInfoArgs] };

export function getExternalPluginInitInfoSerializer(): Serializer<
  ExternalPluginInitInfoArgs,
  ExternalPluginInitInfo
> {
  return dataEnum<ExternalPluginInitInfo>(
    [
      [
        'LifecycleHook',
        struct<GetDataEnumKindContent<ExternalPluginInitInfo, 'LifecycleHook'>>(
          [['fields', tuple([getLifecycleHookInitInfoSerializer()])]]
        ),
      ],
      [
        'Oracle',
        struct<GetDataEnumKindContent<ExternalPluginInitInfo, 'Oracle'>>([
          ['fields', tuple([getOracleInitInfoSerializer()])],
        ]),
      ],
      [
        'DataStore',
        struct<GetDataEnumKindContent<ExternalPluginInitInfo, 'DataStore'>>([
          ['fields', tuple([getDataStoreInitInfoSerializer()])],
        ]),
      ],
    ],
    { description: 'ExternalPluginInitInfo' }
  ) as Serializer<ExternalPluginInitInfoArgs, ExternalPluginInitInfo>;
}

// Data Enum Helpers.
export function externalPluginInitInfo(
  kind: 'LifecycleHook',
  data: GetDataEnumKindContent<
    ExternalPluginInitInfoArgs,
    'LifecycleHook'
  >['fields']
): GetDataEnumKind<ExternalPluginInitInfoArgs, 'LifecycleHook'>;
export function externalPluginInitInfo(
  kind: 'Oracle',
  data: GetDataEnumKindContent<ExternalPluginInitInfoArgs, 'Oracle'>['fields']
): GetDataEnumKind<ExternalPluginInitInfoArgs, 'Oracle'>;
export function externalPluginInitInfo(
  kind: 'DataStore',
  data: GetDataEnumKindContent<
    ExternalPluginInitInfoArgs,
    'DataStore'
  >['fields']
): GetDataEnumKind<ExternalPluginInitInfoArgs, 'DataStore'>;
export function externalPluginInitInfo<
  K extends ExternalPluginInitInfoArgs['__kind']
>(kind: K, data?: any): Extract<ExternalPluginInitInfoArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isExternalPluginInitInfo<
  K extends ExternalPluginInitInfo['__kind']
>(
  kind: K,
  value: ExternalPluginInitInfo
): value is ExternalPluginInitInfo & { __kind: K } {
  return value.__kind === kind;
}
