/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  option,
  struct,
  tuple,
  u32,
} from '@metaplex-foundation/umi/serializers';
import {
  ExternalCheckResult,
  ExternalCheckResultArgs,
  ExternalPlugin,
  ExternalPluginArgs,
  ExternalPluginKey,
  ExternalPluginKeyArgs,
  LifecycleEvent,
  LifecycleEventArgs,
  PluginAuthority,
  PluginAuthorityArgs,
  getExternalCheckResultSerializer,
  getExternalPluginKeySerializer,
  getExternalPluginSerializer,
  getLifecycleEventSerializer,
  getPluginAuthoritySerializer,
} from '.';

export type ExternalPluginInitInfo = {
  pluginKey: ExternalPluginKey;
  plugin: ExternalPlugin;
  initAuthority: Option<PluginAuthority>;
  lifecycleChecks: Option<Array<[LifecycleEvent, ExternalCheckResult]>>;
  data: Option<Uint8Array>;
};

export type ExternalPluginInitInfoArgs = {
  pluginKey: ExternalPluginKeyArgs;
  plugin: ExternalPluginArgs;
  initAuthority: OptionOrNullable<PluginAuthorityArgs>;
  lifecycleChecks: OptionOrNullable<
    Array<[LifecycleEventArgs, ExternalCheckResultArgs]>
  >;
  data: OptionOrNullable<Uint8Array>;
};

export function getExternalPluginInitInfoSerializer(): Serializer<
  ExternalPluginInitInfoArgs,
  ExternalPluginInitInfo
> {
  return struct<ExternalPluginInitInfo>(
    [
      ['pluginKey', getExternalPluginKeySerializer()],
      ['plugin', getExternalPluginSerializer()],
      ['initAuthority', option(getPluginAuthoritySerializer())],
      [
        'lifecycleChecks',
        option(
          array(
            tuple([
              getLifecycleEventSerializer(),
              getExternalCheckResultSerializer(),
            ])
          )
        ),
      ],
      ['data', option(bytes({ size: u32() }))],
    ],
    { description: 'ExternalPluginInitInfo' }
  ) as Serializer<ExternalPluginInitInfoArgs, ExternalPluginInitInfo>;
}
