/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  option,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  BaseExtraAccount,
  BaseExtraAccountArgs,
  ExternalCheckResult,
  ExternalCheckResultArgs,
  HookableLifecycleEvent,
  HookableLifecycleEventArgs,
  ValidationResultsOffset,
  ValidationResultsOffsetArgs,
  getBaseExtraAccountSerializer,
  getExternalCheckResultSerializer,
  getHookableLifecycleEventSerializer,
  getValidationResultsOffsetSerializer,
} from '.';

export type BaseOracleUpdateInfo = {
  lifecycleChecks: Option<Array<[HookableLifecycleEvent, ExternalCheckResult]>>;
  pda: Option<BaseExtraAccount>;
  resultsOffset: Option<ValidationResultsOffset>;
};

export type BaseOracleUpdateInfoArgs = {
  lifecycleChecks: OptionOrNullable<
    Array<[HookableLifecycleEventArgs, ExternalCheckResultArgs]>
  >;
  pda: OptionOrNullable<BaseExtraAccountArgs>;
  resultsOffset: OptionOrNullable<ValidationResultsOffsetArgs>;
};

export function getBaseOracleUpdateInfoSerializer(): Serializer<
  BaseOracleUpdateInfoArgs,
  BaseOracleUpdateInfo
> {
  return struct<BaseOracleUpdateInfo>(
    [
      [
        'lifecycleChecks',
        option(
          array(
            tuple([
              getHookableLifecycleEventSerializer(),
              getExternalCheckResultSerializer(),
            ])
          )
        ),
      ],
      ['pda', option(getBaseExtraAccountSerializer())],
      ['resultsOffset', option(getValidationResultsOffsetSerializer())],
    ],
    { description: 'BaseOracleUpdateInfo' }
  ) as Serializer<BaseOracleUpdateInfoArgs, BaseOracleUpdateInfo>;
}
