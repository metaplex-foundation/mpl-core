/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable, PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  option,
  publicKey as publicKeySerializer,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  ExternalCheckResult,
  ExternalCheckResultArgs,
  ExtraAccount,
  ExtraAccountArgs,
  HookableLifecycleEvent,
  HookableLifecycleEventArgs,
  PluginAuthority,
  PluginAuthorityArgs,
  getExternalCheckResultSerializer,
  getExtraAccountSerializer,
  getHookableLifecycleEventSerializer,
  getPluginAuthoritySerializer,
} from '.';

export type OracleInitInfo = {
  baseAddress: PublicKey;
  initPluginAuthority: Option<PluginAuthority>;
  lifecycleChecks: Option<Array<[HookableLifecycleEvent, ExternalCheckResult]>>;
  pda: Option<ExtraAccount>;
};

export type OracleInitInfoArgs = {
  baseAddress: PublicKey;
  initPluginAuthority: OptionOrNullable<PluginAuthorityArgs>;
  lifecycleChecks: OptionOrNullable<
    Array<[HookableLifecycleEventArgs, ExternalCheckResultArgs]>
  >;
  pda: OptionOrNullable<ExtraAccountArgs>;
};

export function getOracleInitInfoSerializer(): Serializer<
  OracleInitInfoArgs,
  OracleInitInfo
> {
  return struct<OracleInitInfo>(
    [
      ['baseAddress', publicKeySerializer()],
      ['initPluginAuthority', option(getPluginAuthoritySerializer())],
      [
        'lifecycleChecks',
        option(
          array(
            tuple([
              getHookableLifecycleEventSerializer(),
              getExternalCheckResultSerializer(),
            ])
          )
        ),
      ],
      ['pda', option(getExtraAccountSerializer())],
    ],
    { description: 'OracleInitInfo' }
  ) as Serializer<OracleInitInfoArgs, OracleInitInfo>;
}
