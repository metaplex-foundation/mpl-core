/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  option,
  struct,
  tuple,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  BasePluginAuthority,
  BasePluginAuthorityArgs,
  ExternalCheckResult,
  ExternalCheckResultArgs,
  ExternalPluginType,
  ExternalPluginTypeArgs,
  HookableLifecycleEvent,
  HookableLifecycleEventArgs,
  getBasePluginAuthoritySerializer,
  getExternalCheckResultSerializer,
  getExternalPluginTypeSerializer,
  getHookableLifecycleEventSerializer,
} from '.';

export type ExternalRegistryRecord = {
  pluginType: ExternalPluginType;
  authority: BasePluginAuthority;
  lifecycleChecks: Option<Array<[HookableLifecycleEvent, ExternalCheckResult]>>;
  offset: bigint;
};

export type ExternalRegistryRecordArgs = {
  pluginType: ExternalPluginTypeArgs;
  authority: BasePluginAuthorityArgs;
  lifecycleChecks: OptionOrNullable<
    Array<[HookableLifecycleEventArgs, ExternalCheckResultArgs]>
  >;
  offset: number | bigint;
};

export function getExternalRegistryRecordSerializer(): Serializer<
  ExternalRegistryRecordArgs,
  ExternalRegistryRecord
> {
  return struct<ExternalRegistryRecord>(
    [
      ['pluginType', getExternalPluginTypeSerializer()],
      ['authority', getBasePluginAuthoritySerializer()],
      [
        'lifecycleChecks',
        option(
          array(
            tuple([
              getHookableLifecycleEventSerializer(),
              getExternalCheckResultSerializer(),
            ])
          )
        ),
      ],
      ['offset', u64()],
    ],
    { description: 'ExternalRegistryRecord' }
  ) as Serializer<ExternalRegistryRecordArgs, ExternalRegistryRecord>;
}
