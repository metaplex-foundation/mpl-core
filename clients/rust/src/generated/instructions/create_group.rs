//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

#[cfg(feature = "anchor")]
use anchor_lang::prelude::{AnchorDeserialize, AnchorSerialize};
#[cfg(not(feature = "anchor"))]
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

/// Accounts.
pub struct CreateGroup {
    /// The account paying for storage fees
    pub payer: solana_program::pubkey::Pubkey,
    /// The address of the new group account
    pub group: solana_program::pubkey::Pubkey,
    /// The update authority for the group
    pub update_authority: solana_program::pubkey::Pubkey,
    /// The system program
    pub system_program: solana_program::pubkey::Pubkey,
}

impl CreateGroup {
    pub fn instruction(
        &self,
        args: CreateGroupInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateGroupInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.group, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.update_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = CreateGroupInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_ID,
            accounts,
            data,
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
pub struct CreateGroupInstructionData {
    discriminator: u8,
}

impl CreateGroupInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 33 }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct CreateGroupInstructionArgs {
    pub name: String,
    pub uri: String,
    pub max_collections: u32,
    pub max_assets: u32,
    pub max_groups: u32,
    pub max_plugins: u32,
    pub initial_collections: Vec<Pubkey>,
    pub initial_parent_groups: Vec<Pubkey>,
    pub initial_assets: Vec<Pubkey>,
}

/// Instruction builder for `CreateGroup`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[writable]` group
///   2. `[signer]` update_authority
///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Default)]
pub struct CreateGroupBuilder {
    payer: Option<solana_program::pubkey::Pubkey>,
    group: Option<solana_program::pubkey::Pubkey>,
    update_authority: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    name: Option<String>,
    uri: Option<String>,
    max_collections: Option<u32>,
    max_assets: Option<u32>,
    max_groups: Option<u32>,
    max_plugins: Option<u32>,
    initial_collections: Option<Vec<Pubkey>>,
    initial_parent_groups: Option<Vec<Pubkey>>,
    initial_assets: Option<Vec<Pubkey>>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateGroupBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The account paying for storage fees
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// The address of the new group account
    #[inline(always)]
    pub fn group(&mut self, group: solana_program::pubkey::Pubkey) -> &mut Self {
        self.group = Some(group);
        self
    }
    /// The update authority for the group
    #[inline(always)]
    pub fn update_authority(
        &mut self,
        update_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.update_authority = Some(update_authority);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The system program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.uri = Some(uri);
        self
    }
    #[inline(always)]
    pub fn max_collections(&mut self, max_collections: u32) -> &mut Self {
        self.max_collections = Some(max_collections);
        self
    }
    #[inline(always)]
    pub fn max_assets(&mut self, max_assets: u32) -> &mut Self {
        self.max_assets = Some(max_assets);
        self
    }
    #[inline(always)]
    pub fn max_groups(&mut self, max_groups: u32) -> &mut Self {
        self.max_groups = Some(max_groups);
        self
    }
    #[inline(always)]
    pub fn max_plugins(&mut self, max_plugins: u32) -> &mut Self {
        self.max_plugins = Some(max_plugins);
        self
    }
    #[inline(always)]
    pub fn initial_collections(&mut self, initial_collections: Vec<Pubkey>) -> &mut Self {
        self.initial_collections = Some(initial_collections);
        self
    }
    #[inline(always)]
    pub fn initial_parent_groups(&mut self, initial_parent_groups: Vec<Pubkey>) -> &mut Self {
        self.initial_parent_groups = Some(initial_parent_groups);
        self
    }
    #[inline(always)]
    pub fn initial_assets(&mut self, initial_assets: Vec<Pubkey>) -> &mut Self {
        self.initial_assets = Some(initial_assets);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateGroup {
            payer: self.payer.expect("payer is not set"),
            group: self.group.expect("group is not set"),
            update_authority: self.update_authority.expect("update_authority is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = CreateGroupInstructionArgs {
            name: self.name.clone().expect("name is not set"),
            uri: self.uri.clone().expect("uri is not set"),
            max_collections: self
                .max_collections
                .clone()
                .expect("max_collections is not set"),
            max_assets: self.max_assets.clone().expect("max_assets is not set"),
            max_groups: self.max_groups.clone().expect("max_groups is not set"),
            max_plugins: self.max_plugins.clone().expect("max_plugins is not set"),
            initial_collections: self
                .initial_collections
                .clone()
                .expect("initial_collections is not set"),
            initial_parent_groups: self
                .initial_parent_groups
                .clone()
                .expect("initial_parent_groups is not set"),
            initial_assets: self
                .initial_assets
                .clone()
                .expect("initial_assets is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_group` CPI accounts.
pub struct CreateGroupCpiAccounts<'a, 'b> {
    /// The account paying for storage fees
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the new group account
    pub group: &'b solana_program::account_info::AccountInfo<'a>,
    /// The update authority for the group
    pub update_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_group` CPI instruction.
pub struct CreateGroupCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The account paying for storage fees
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the new group account
    pub group: &'b solana_program::account_info::AccountInfo<'a>,
    /// The update authority for the group
    pub update_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateGroupInstructionArgs,
}

impl<'a, 'b> CreateGroupCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreateGroupCpiAccounts<'a, 'b>,
        args: CreateGroupInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            group: accounts.group,
            update_authority: accounts.update_authority,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.group.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.update_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = CreateGroupInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.group.clone());
        account_infos.push(self.update_authority.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateGroup` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[writable]` group
///   2. `[signer]` update_authority
///   3. `[]` system_program
pub struct CreateGroupCpiBuilder<'a, 'b> {
    instruction: Box<CreateGroupCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateGroupCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateGroupCpiBuilderInstruction {
            __program: program,
            payer: None,
            group: None,
            update_authority: None,
            system_program: None,
            name: None,
            uri: None,
            max_collections: None,
            max_assets: None,
            max_groups: None,
            max_plugins: None,
            initial_collections: None,
            initial_parent_groups: None,
            initial_assets: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The account paying for storage fees
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// The address of the new group account
    #[inline(always)]
    pub fn group(&mut self, group: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.group = Some(group);
        self
    }
    /// The update authority for the group
    #[inline(always)]
    pub fn update_authority(
        &mut self,
        update_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.update_authority = Some(update_authority);
        self
    }
    /// The system program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.instruction.uri = Some(uri);
        self
    }
    #[inline(always)]
    pub fn max_collections(&mut self, max_collections: u32) -> &mut Self {
        self.instruction.max_collections = Some(max_collections);
        self
    }
    #[inline(always)]
    pub fn max_assets(&mut self, max_assets: u32) -> &mut Self {
        self.instruction.max_assets = Some(max_assets);
        self
    }
    #[inline(always)]
    pub fn max_groups(&mut self, max_groups: u32) -> &mut Self {
        self.instruction.max_groups = Some(max_groups);
        self
    }
    #[inline(always)]
    pub fn max_plugins(&mut self, max_plugins: u32) -> &mut Self {
        self.instruction.max_plugins = Some(max_plugins);
        self
    }
    #[inline(always)]
    pub fn initial_collections(&mut self, initial_collections: Vec<Pubkey>) -> &mut Self {
        self.instruction.initial_collections = Some(initial_collections);
        self
    }
    #[inline(always)]
    pub fn initial_parent_groups(&mut self, initial_parent_groups: Vec<Pubkey>) -> &mut Self {
        self.instruction.initial_parent_groups = Some(initial_parent_groups);
        self
    }
    #[inline(always)]
    pub fn initial_assets(&mut self, initial_assets: Vec<Pubkey>) -> &mut Self {
        self.instruction.initial_assets = Some(initial_assets);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreateGroupInstructionArgs {
            name: self.instruction.name.clone().expect("name is not set"),
            uri: self.instruction.uri.clone().expect("uri is not set"),
            max_collections: self
                .instruction
                .max_collections
                .clone()
                .expect("max_collections is not set"),
            max_assets: self
                .instruction
                .max_assets
                .clone()
                .expect("max_assets is not set"),
            max_groups: self
                .instruction
                .max_groups
                .clone()
                .expect("max_groups is not set"),
            max_plugins: self
                .instruction
                .max_plugins
                .clone()
                .expect("max_plugins is not set"),
            initial_collections: self
                .instruction
                .initial_collections
                .clone()
                .expect("initial_collections is not set"),
            initial_parent_groups: self
                .instruction
                .initial_parent_groups
                .clone()
                .expect("initial_parent_groups is not set"),
            initial_assets: self
                .instruction
                .initial_assets
                .clone()
                .expect("initial_assets is not set"),
        };
        let instruction = CreateGroupCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            group: self.instruction.group.expect("group is not set"),

            update_authority: self
                .instruction
                .update_authority
                .expect("update_authority is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct CreateGroupCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    update_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    name: Option<String>,
    uri: Option<String>,
    max_collections: Option<u32>,
    max_assets: Option<u32>,
    max_groups: Option<u32>,
    max_plugins: Option<u32>,
    initial_collections: Option<Vec<Pubkey>>,
    initial_parent_groups: Option<Vec<Pubkey>>,
    initial_assets: Option<Vec<Pubkey>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
