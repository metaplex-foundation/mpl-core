//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::PluginAuthorityType;
#[cfg(feature = "anchor")]
use anchor_lang::prelude::{AnchorDeserialize, AnchorSerialize};
#[cfg(not(feature = "anchor"))]
use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct AddGroupPlugin {
    /// The group update authority or delegated authority
    pub authority: solana_program::pubkey::Pubkey,
    /// The group account
    pub group: solana_program::pubkey::Pubkey,
    /// The plugin account to create
    pub plugin: solana_program::pubkey::Pubkey,
    /// The plugin program id
    pub plugin_program: solana_program::pubkey::Pubkey,
    /// The system program
    pub system_program: solana_program::pubkey::Pubkey,
}

impl AddGroupPlugin {
    pub fn instruction(
        &self,
        args: AddGroupPluginInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: AddGroupPluginInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.group, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.plugin,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.plugin_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = AddGroupPluginInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_ID,
            accounts,
            data,
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
pub struct AddGroupPluginInstructionData {
    discriminator: u8,
}

impl AddGroupPluginInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 41 }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AddGroupPluginInstructionArgs {
    pub plugin_type: String,
    pub authority_type: PluginAuthorityType,
    pub plugin_args: Vec<u8>,
}

/// Instruction builder for `AddGroupPlugin`.
///
/// ### Accounts:
///
///   0. `[signer]` authority
///   1. `[writable]` group
///   2. `[writable]` plugin
///   3. `[]` plugin_program
///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Default)]
pub struct AddGroupPluginBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    group: Option<solana_program::pubkey::Pubkey>,
    plugin: Option<solana_program::pubkey::Pubkey>,
    plugin_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    plugin_type: Option<String>,
    authority_type: Option<PluginAuthorityType>,
    plugin_args: Option<Vec<u8>>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AddGroupPluginBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The group update authority or delegated authority
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// The group account
    #[inline(always)]
    pub fn group(&mut self, group: solana_program::pubkey::Pubkey) -> &mut Self {
        self.group = Some(group);
        self
    }
    /// The plugin account to create
    #[inline(always)]
    pub fn plugin(&mut self, plugin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.plugin = Some(plugin);
        self
    }
    /// The plugin program id
    #[inline(always)]
    pub fn plugin_program(&mut self, plugin_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.plugin_program = Some(plugin_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The system program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn plugin_type(&mut self, plugin_type: String) -> &mut Self {
        self.plugin_type = Some(plugin_type);
        self
    }
    #[inline(always)]
    pub fn authority_type(&mut self, authority_type: PluginAuthorityType) -> &mut Self {
        self.authority_type = Some(authority_type);
        self
    }
    #[inline(always)]
    pub fn plugin_args(&mut self, plugin_args: Vec<u8>) -> &mut Self {
        self.plugin_args = Some(plugin_args);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AddGroupPlugin {
            authority: self.authority.expect("authority is not set"),
            group: self.group.expect("group is not set"),
            plugin: self.plugin.expect("plugin is not set"),
            plugin_program: self.plugin_program.expect("plugin_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = AddGroupPluginInstructionArgs {
            plugin_type: self.plugin_type.clone().expect("plugin_type is not set"),
            authority_type: self
                .authority_type
                .clone()
                .expect("authority_type is not set"),
            plugin_args: self.plugin_args.clone().expect("plugin_args is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `add_group_plugin` CPI accounts.
pub struct AddGroupPluginCpiAccounts<'a, 'b> {
    /// The group update authority or delegated authority
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The group account
    pub group: &'b solana_program::account_info::AccountInfo<'a>,
    /// The plugin account to create
    pub plugin: &'b solana_program::account_info::AccountInfo<'a>,
    /// The plugin program id
    pub plugin_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `add_group_plugin` CPI instruction.
pub struct AddGroupPluginCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The group update authority or delegated authority
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The group account
    pub group: &'b solana_program::account_info::AccountInfo<'a>,
    /// The plugin account to create
    pub plugin: &'b solana_program::account_info::AccountInfo<'a>,
    /// The plugin program id
    pub plugin_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: AddGroupPluginInstructionArgs,
}

impl<'a, 'b> AddGroupPluginCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AddGroupPluginCpiAccounts<'a, 'b>,
        args: AddGroupPluginInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            group: accounts.group,
            plugin: accounts.plugin,
            plugin_program: accounts.plugin_program,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.group.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.plugin.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.plugin_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = AddGroupPluginInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.group.clone());
        account_infos.push(self.plugin.clone());
        account_infos.push(self.plugin_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AddGroupPlugin` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` authority
///   1. `[writable]` group
///   2. `[writable]` plugin
///   3. `[]` plugin_program
///   4. `[]` system_program
pub struct AddGroupPluginCpiBuilder<'a, 'b> {
    instruction: Box<AddGroupPluginCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AddGroupPluginCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AddGroupPluginCpiBuilderInstruction {
            __program: program,
            authority: None,
            group: None,
            plugin: None,
            plugin_program: None,
            system_program: None,
            plugin_type: None,
            authority_type: None,
            plugin_args: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The group update authority or delegated authority
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// The group account
    #[inline(always)]
    pub fn group(&mut self, group: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.group = Some(group);
        self
    }
    /// The plugin account to create
    #[inline(always)]
    pub fn plugin(
        &mut self,
        plugin: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.plugin = Some(plugin);
        self
    }
    /// The plugin program id
    #[inline(always)]
    pub fn plugin_program(
        &mut self,
        plugin_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.plugin_program = Some(plugin_program);
        self
    }
    /// The system program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn plugin_type(&mut self, plugin_type: String) -> &mut Self {
        self.instruction.plugin_type = Some(plugin_type);
        self
    }
    #[inline(always)]
    pub fn authority_type(&mut self, authority_type: PluginAuthorityType) -> &mut Self {
        self.instruction.authority_type = Some(authority_type);
        self
    }
    #[inline(always)]
    pub fn plugin_args(&mut self, plugin_args: Vec<u8>) -> &mut Self {
        self.instruction.plugin_args = Some(plugin_args);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = AddGroupPluginInstructionArgs {
            plugin_type: self
                .instruction
                .plugin_type
                .clone()
                .expect("plugin_type is not set"),
            authority_type: self
                .instruction
                .authority_type
                .clone()
                .expect("authority_type is not set"),
            plugin_args: self
                .instruction
                .plugin_args
                .clone()
                .expect("plugin_args is not set"),
        };
        let instruction = AddGroupPluginCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            group: self.instruction.group.expect("group is not set"),

            plugin: self.instruction.plugin.expect("plugin is not set"),

            plugin_program: self
                .instruction
                .plugin_program
                .expect("plugin_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct AddGroupPluginCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    plugin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    plugin_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    plugin_type: Option<String>,
    authority_type: Option<PluginAuthorityType>,
    plugin_args: Option<Vec<u8>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
