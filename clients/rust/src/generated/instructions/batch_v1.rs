//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

#[cfg(feature = "anchor")]
use anchor_lang::prelude::{AnchorDeserialize, AnchorSerialize};
#[cfg(not(feature = "anchor"))]
use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct BatchV1 {
    /// Dummy account
    pub dummy: Option<solana_program::pubkey::Pubkey>,
}

impl BatchV1 {
    pub fn instruction(
        &self,
        args: BatchV1InstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: BatchV1InstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(1 + remaining_accounts.len());
        if let Some(dummy) = self.dummy {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                dummy, false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MPL_CORE_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = BatchV1InstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_ID,
            accounts,
            data,
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
pub struct BatchV1InstructionData {
    discriminator: u8,
}

impl BatchV1InstructionData {
    pub fn new() -> Self {
        Self { discriminator: 31 }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BatchV1InstructionArgs {
    pub num_accounts: Vec<u8>,
    pub instructions: Vec<u8>,
}

/// Instruction builder for `BatchV1`.
///
/// ### Accounts:
///
///   0. `[optional]` dummy
#[derive(Default)]
pub struct BatchV1Builder {
    dummy: Option<solana_program::pubkey::Pubkey>,
    num_accounts: Option<Vec<u8>>,
    instructions: Option<Vec<u8>>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl BatchV1Builder {
    pub fn new() -> Self {
        Self::default()
    }
    /// `[optional account]`
    /// Dummy account
    #[inline(always)]
    pub fn dummy(&mut self, dummy: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.dummy = dummy;
        self
    }
    #[inline(always)]
    pub fn num_accounts(&mut self, num_accounts: Vec<u8>) -> &mut Self {
        self.num_accounts = Some(num_accounts);
        self
    }
    #[inline(always)]
    pub fn instructions(&mut self, instructions: Vec<u8>) -> &mut Self {
        self.instructions = Some(instructions);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = BatchV1 { dummy: self.dummy };
        let args = BatchV1InstructionArgs {
            num_accounts: self.num_accounts.clone().expect("num_accounts is not set"),
            instructions: self.instructions.clone().expect("instructions is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `batch_v1` CPI accounts.
pub struct BatchV1CpiAccounts<'a, 'b> {
    /// Dummy account
    pub dummy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `batch_v1` CPI instruction.
pub struct BatchV1Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Dummy account
    pub dummy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: BatchV1InstructionArgs,
}

impl<'a, 'b> BatchV1Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: BatchV1CpiAccounts<'a, 'b>,
        args: BatchV1InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            dummy: accounts.dummy,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(1 + remaining_accounts.len());
        if let Some(dummy) = self.dummy {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *dummy.key, false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MPL_CORE_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = BatchV1InstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(1 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        if let Some(dummy) = self.dummy {
            account_infos.push(dummy.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `BatchV1` via CPI.
///
/// ### Accounts:
///
///   0. `[optional]` dummy
pub struct BatchV1CpiBuilder<'a, 'b> {
    instruction: Box<BatchV1CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> BatchV1CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(BatchV1CpiBuilderInstruction {
            __program: program,
            dummy: None,
            num_accounts: None,
            instructions: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// `[optional account]`
    /// Dummy account
    #[inline(always)]
    pub fn dummy(
        &mut self,
        dummy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.dummy = dummy;
        self
    }
    #[inline(always)]
    pub fn num_accounts(&mut self, num_accounts: Vec<u8>) -> &mut Self {
        self.instruction.num_accounts = Some(num_accounts);
        self
    }
    #[inline(always)]
    pub fn instructions(&mut self, instructions: Vec<u8>) -> &mut Self {
        self.instruction.instructions = Some(instructions);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = BatchV1InstructionArgs {
            num_accounts: self
                .instruction
                .num_accounts
                .clone()
                .expect("num_accounts is not set"),
            instructions: self
                .instruction
                .instructions
                .clone()
                .expect("instructions is not set"),
        };
        let instruction = BatchV1Cpi {
            __program: self.instruction.__program,

            dummy: self.instruction.dummy,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct BatchV1CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    dummy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    num_accounts: Option<Vec<u8>>,
    instructions: Option<Vec<u8>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
