//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

#[cfg(feature = "anchor")]
use anchor_lang::prelude::{AnchorDeserialize, AnchorSerialize};
#[cfg(not(feature = "anchor"))]
use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct AddAssetsToGroup {
    /// The group update authority or delegated authority
    pub authority: solana_program::pubkey::Pubkey,
    /// The group account
    pub group: solana_program::pubkey::Pubkey,
}

impl AddAssetsToGroup {
    pub fn instruction(
        &self,
        args: AddAssetsToGroupInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: AddAssetsToGroupInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.group, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = AddAssetsToGroupInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_ID,
            accounts,
            data,
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
pub struct AddAssetsToGroupInstructionData {
    discriminator: u8,
}

impl AddAssetsToGroupInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 37 }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AddAssetsToGroupInstructionArgs {
    pub asset_indices: Vec<u8>,
    pub authority_indices: Vec<u8>,
}

/// Instruction builder for `AddAssetsToGroup`.
///
/// ### Accounts:
///
///   0. `[signer]` authority
///   1. `[writable]` group
#[derive(Default)]
pub struct AddAssetsToGroupBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    group: Option<solana_program::pubkey::Pubkey>,
    asset_indices: Option<Vec<u8>>,
    authority_indices: Option<Vec<u8>>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AddAssetsToGroupBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The group update authority or delegated authority
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// The group account
    #[inline(always)]
    pub fn group(&mut self, group: solana_program::pubkey::Pubkey) -> &mut Self {
        self.group = Some(group);
        self
    }
    #[inline(always)]
    pub fn asset_indices(&mut self, asset_indices: Vec<u8>) -> &mut Self {
        self.asset_indices = Some(asset_indices);
        self
    }
    #[inline(always)]
    pub fn authority_indices(&mut self, authority_indices: Vec<u8>) -> &mut Self {
        self.authority_indices = Some(authority_indices);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AddAssetsToGroup {
            authority: self.authority.expect("authority is not set"),
            group: self.group.expect("group is not set"),
        };
        let args = AddAssetsToGroupInstructionArgs {
            asset_indices: self
                .asset_indices
                .clone()
                .expect("asset_indices is not set"),
            authority_indices: self
                .authority_indices
                .clone()
                .expect("authority_indices is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `add_assets_to_group` CPI accounts.
pub struct AddAssetsToGroupCpiAccounts<'a, 'b> {
    /// The group update authority or delegated authority
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The group account
    pub group: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `add_assets_to_group` CPI instruction.
pub struct AddAssetsToGroupCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The group update authority or delegated authority
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The group account
    pub group: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: AddAssetsToGroupInstructionArgs,
}

impl<'a, 'b> AddAssetsToGroupCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AddAssetsToGroupCpiAccounts<'a, 'b>,
        args: AddAssetsToGroupInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            group: accounts.group,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.group.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = AddAssetsToGroupInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(2 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.group.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AddAssetsToGroup` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` authority
///   1. `[writable]` group
pub struct AddAssetsToGroupCpiBuilder<'a, 'b> {
    instruction: Box<AddAssetsToGroupCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AddAssetsToGroupCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AddAssetsToGroupCpiBuilderInstruction {
            __program: program,
            authority: None,
            group: None,
            asset_indices: None,
            authority_indices: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The group update authority or delegated authority
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// The group account
    #[inline(always)]
    pub fn group(&mut self, group: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.group = Some(group);
        self
    }
    #[inline(always)]
    pub fn asset_indices(&mut self, asset_indices: Vec<u8>) -> &mut Self {
        self.instruction.asset_indices = Some(asset_indices);
        self
    }
    #[inline(always)]
    pub fn authority_indices(&mut self, authority_indices: Vec<u8>) -> &mut Self {
        self.instruction.authority_indices = Some(authority_indices);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = AddAssetsToGroupInstructionArgs {
            asset_indices: self
                .instruction
                .asset_indices
                .clone()
                .expect("asset_indices is not set"),
            authority_indices: self
                .instruction
                .authority_indices
                .clone()
                .expect("authority_indices is not set"),
        };
        let instruction = AddAssetsToGroupCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            group: self.instruction.group.expect("group is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct AddAssetsToGroupCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    asset_indices: Option<Vec<u8>>,
    authority_indices: Option<Vec<u8>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
